// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clickhouse_grpc.proto

package io.java.spark.clickhouse.code;

public final class ClickhouseGrpc {
  private ClickhouseGrpc() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code clickhouse.grpc.LogsLevel}
   */
  public enum LogsLevel
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LOG_NONE = 0;</code>
     */
    LOG_NONE(0),
    /**
     * <code>LOG_FATAL = 1;</code>
     */
    LOG_FATAL(1),
    /**
     * <code>LOG_CRITICAL = 2;</code>
     */
    LOG_CRITICAL(2),
    /**
     * <code>LOG_ERROR = 3;</code>
     */
    LOG_ERROR(3),
    /**
     * <code>LOG_WARNING = 4;</code>
     */
    LOG_WARNING(4),
    /**
     * <code>LOG_NOTICE = 5;</code>
     */
    LOG_NOTICE(5),
    /**
     * <code>LOG_INFORMATION = 6;</code>
     */
    LOG_INFORMATION(6),
    /**
     * <code>LOG_DEBUG = 7;</code>
     */
    LOG_DEBUG(7),
    /**
     * <code>LOG_TRACE = 8;</code>
     */
    LOG_TRACE(8),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>LOG_NONE = 0;</code>
     */
    public static final int LOG_NONE_VALUE = 0;
    /**
     * <code>LOG_FATAL = 1;</code>
     */
    public static final int LOG_FATAL_VALUE = 1;
    /**
     * <code>LOG_CRITICAL = 2;</code>
     */
    public static final int LOG_CRITICAL_VALUE = 2;
    /**
     * <code>LOG_ERROR = 3;</code>
     */
    public static final int LOG_ERROR_VALUE = 3;
    /**
     * <code>LOG_WARNING = 4;</code>
     */
    public static final int LOG_WARNING_VALUE = 4;
    /**
     * <code>LOG_NOTICE = 5;</code>
     */
    public static final int LOG_NOTICE_VALUE = 5;
    /**
     * <code>LOG_INFORMATION = 6;</code>
     */
    public static final int LOG_INFORMATION_VALUE = 6;
    /**
     * <code>LOG_DEBUG = 7;</code>
     */
    public static final int LOG_DEBUG_VALUE = 7;
    /**
     * <code>LOG_TRACE = 8;</code>
     */
    public static final int LOG_TRACE_VALUE = 8;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static LogsLevel valueOf(int value) {
      return forNumber(value);
    }

    public static LogsLevel forNumber(int value) {
      switch (value) {
        case 0: return LOG_NONE;
        case 1: return LOG_FATAL;
        case 2: return LOG_CRITICAL;
        case 3: return LOG_ERROR;
        case 4: return LOG_WARNING;
        case 5: return LOG_NOTICE;
        case 6: return LOG_INFORMATION;
        case 7: return LOG_DEBUG;
        case 8: return LOG_TRACE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<LogsLevel>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        LogsLevel> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LogsLevel>() {
            public LogsLevel findValueByNumber(int number) {
              return LogsLevel.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return ClickhouseGrpc.getDescriptor().getEnumTypes().get(0);
    }

    private static final LogsLevel[] VALUES = values();

    public static LogsLevel valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private LogsLevel(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:clickhouse.grpc.LogsLevel)
  }

  public interface NameAndTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clickhouse.grpc.NameAndType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>string type = 2;</code>
     */
    java.lang.String getType();
    /**
     * <code>string type = 2;</code>
     */
    com.google.protobuf.ByteString
        getTypeBytes();
  }
  /**
   * Protobuf type {@code clickhouse.grpc.NameAndType}
   */
  public  static final class NameAndType extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clickhouse.grpc.NameAndType)
      NameAndTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use NameAndType.newBuilder() to construct.
    private NameAndType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private NameAndType() {
      name_ = "";
      type_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private NameAndType(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              type_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_NameAndType_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_NameAndType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ClickhouseGrpc.NameAndType.class, ClickhouseGrpc.NameAndType.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private volatile java.lang.Object type_;
    /**
     * <code>string type = 2;</code>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        type_ = s;
        return s;
      }
    }
    /**
     * <code>string type = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (!getTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, type_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (!getTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, type_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ClickhouseGrpc.NameAndType)) {
        return super.equals(obj);
      }
      ClickhouseGrpc.NameAndType other = (ClickhouseGrpc.NameAndType) obj;

      boolean result = true;
      result = result && getName()
          .equals(other.getName());
      result = result && getType()
          .equals(other.getType());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getType().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ClickhouseGrpc.NameAndType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.NameAndType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.NameAndType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.NameAndType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.NameAndType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.NameAndType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.NameAndType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.NameAndType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.NameAndType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.NameAndType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.NameAndType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.NameAndType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ClickhouseGrpc.NameAndType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code clickhouse.grpc.NameAndType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clickhouse.grpc.NameAndType)
        ClickhouseGrpc.NameAndTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_NameAndType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_NameAndType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ClickhouseGrpc.NameAndType.class, ClickhouseGrpc.NameAndType.Builder.class);
      }

      // Construct using clickhouse.grpc.ClickhouseGrpc.NameAndType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";

        type_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_NameAndType_descriptor;
      }

      public ClickhouseGrpc.NameAndType getDefaultInstanceForType() {
        return ClickhouseGrpc.NameAndType.getDefaultInstance();
      }

      public ClickhouseGrpc.NameAndType build() {
        ClickhouseGrpc.NameAndType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ClickhouseGrpc.NameAndType buildPartial() {
        ClickhouseGrpc.NameAndType result = new ClickhouseGrpc.NameAndType(this);
        result.name_ = name_;
        result.type_ = type_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ClickhouseGrpc.NameAndType) {
          return mergeFrom((ClickhouseGrpc.NameAndType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ClickhouseGrpc.NameAndType other) {
        if (other == ClickhouseGrpc.NameAndType.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getType().isEmpty()) {
          type_ = other.type_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ClickhouseGrpc.NameAndType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ClickhouseGrpc.NameAndType) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string name = 1;</code>
       */
      public Builder clearName() {

        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object type_ = "";
      /**
       * <code>string type = 2;</code>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          type_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string type = 2;</code>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string type = 2;</code>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string type = 2;</code>
       */
      public Builder clearType() {

        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <code>string type = 2;</code>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        type_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clickhouse.grpc.NameAndType)
    }

    // @@protoc_insertion_point(class_scope:clickhouse.grpc.NameAndType)
    private static final ClickhouseGrpc.NameAndType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ClickhouseGrpc.NameAndType();
    }

    public static ClickhouseGrpc.NameAndType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NameAndType>
        PARSER = new com.google.protobuf.AbstractParser<NameAndType>() {
      public NameAndType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NameAndType(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<NameAndType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NameAndType> getParserForType() {
      return PARSER;
    }

    public ClickhouseGrpc.NameAndType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExternalTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clickhouse.grpc.ExternalTable)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name of the table. If omitted, "_data" is used.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name of the table. If omitted, "_data" is used.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
     */
    java.util.List<ClickhouseGrpc.NameAndType>
        getColumnsList();
    /**
     * <pre>
     * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
     */
    ClickhouseGrpc.NameAndType getColumns(int index);
    /**
     * <pre>
     * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
     */
    int getColumnsCount();
    /**
     * <pre>
     * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
     */
    java.util.List<? extends ClickhouseGrpc.NameAndTypeOrBuilder>
        getColumnsOrBuilderList();
    /**
     * <pre>
     * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
     */
    ClickhouseGrpc.NameAndTypeOrBuilder getColumnsOrBuilder(
        int index);

    /**
     * <pre>
     * Data to insert to the external table.
     * If a method with streaming input (i.e. ExecuteQueryWithStreamInput() or ExecuteQueryWithStreamIO()) is used,
     * then data for insertion to the same external table can be split between multiple QueryInfos.
     * </pre>
     *
     * <code>bytes data = 3;</code>
     */
    com.google.protobuf.ByteString getData();

    /**
     * <pre>
     * Format of the data to insert to the external table.
     * </pre>
     *
     * <code>string format = 4;</code>
     */
    java.lang.String getFormat();
    /**
     * <pre>
     * Format of the data to insert to the external table.
     * </pre>
     *
     * <code>string format = 4;</code>
     */
    com.google.protobuf.ByteString
        getFormatBytes();

    /**
     * <pre>
     * Compression type used to compress `data`.
     * Supported values: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
     * </pre>
     *
     * <code>string compression_type = 6;</code>
     */
    java.lang.String getCompressionType();
    /**
     * <pre>
     * Compression type used to compress `data`.
     * Supported values: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
     * </pre>
     *
     * <code>string compression_type = 6;</code>
     */
    com.google.protobuf.ByteString
        getCompressionTypeBytes();

    /**
     * <pre>
     * Settings for executing that insertion, applied after QueryInfo.settings.
     * </pre>
     *
     * <code>map&lt;string, string&gt; settings = 5;</code>
     */
    int getSettingsCount();
    /**
     * <pre>
     * Settings for executing that insertion, applied after QueryInfo.settings.
     * </pre>
     *
     * <code>map&lt;string, string&gt; settings = 5;</code>
     */
    boolean containsSettings(
        java.lang.String key);
    /**
     * Use {@link #getSettingsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getSettings();
    /**
     * <pre>
     * Settings for executing that insertion, applied after QueryInfo.settings.
     * </pre>
     *
     * <code>map&lt;string, string&gt; settings = 5;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getSettingsMap();
    /**
     * <pre>
     * Settings for executing that insertion, applied after QueryInfo.settings.
     * </pre>
     *
     * <code>map&lt;string, string&gt; settings = 5;</code>
     */

    java.lang.String getSettingsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * Settings for executing that insertion, applied after QueryInfo.settings.
     * </pre>
     *
     * <code>map&lt;string, string&gt; settings = 5;</code>
     */

    java.lang.String getSettingsOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * Describes an external table - a table which will exists only while a query is executing.
   * </pre>
   *
   * Protobuf type {@code clickhouse.grpc.ExternalTable}
   */
  public  static final class ExternalTable extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clickhouse.grpc.ExternalTable)
      ExternalTableOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExternalTable.newBuilder() to construct.
    private ExternalTable(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExternalTable() {
      name_ = "";
      columns_ = java.util.Collections.emptyList();
      data_ = com.google.protobuf.ByteString.EMPTY;
      format_ = "";
      compressionType_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ExternalTable(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                columns_ = new java.util.ArrayList<ClickhouseGrpc.NameAndType>();
                mutable_bitField0_ |= 0x00000002;
              }
              columns_.add(
                  input.readMessage(ClickhouseGrpc.NameAndType.parser(), extensionRegistry));
              break;
            }
            case 26: {

              data_ = input.readBytes();
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              format_ = s;
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                settings_ = com.google.protobuf.MapField.newMapField(
                    SettingsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000020;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              settings__ = input.readMessage(
                  SettingsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              settings_.getMutableMap().put(
                  settings__.getKey(), settings__.getValue());
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              compressionType_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          columns_ = java.util.Collections.unmodifiableList(columns_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_ExternalTable_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 5:
          return internalGetSettings();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_ExternalTable_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ClickhouseGrpc.ExternalTable.class, ClickhouseGrpc.ExternalTable.Builder.class);
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Name of the table. If omitted, "_data" is used.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of the table. If omitted, "_data" is used.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COLUMNS_FIELD_NUMBER = 2;
    private java.util.List<ClickhouseGrpc.NameAndType> columns_;
    /**
     * <pre>
     * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
     */
    public java.util.List<ClickhouseGrpc.NameAndType> getColumnsList() {
      return columns_;
    }
    /**
     * <pre>
     * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
     */
    public java.util.List<? extends ClickhouseGrpc.NameAndTypeOrBuilder>
        getColumnsOrBuilderList() {
      return columns_;
    }
    /**
     * <pre>
     * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
     */
    public int getColumnsCount() {
      return columns_.size();
    }
    /**
     * <pre>
     * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
     */
    public ClickhouseGrpc.NameAndType getColumns(int index) {
      return columns_.get(index);
    }
    /**
     * <pre>
     * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
     */
    public ClickhouseGrpc.NameAndTypeOrBuilder getColumnsOrBuilder(
        int index) {
      return columns_.get(index);
    }

    public static final int DATA_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString data_;
    /**
     * <pre>
     * Data to insert to the external table.
     * If a method with streaming input (i.e. ExecuteQueryWithStreamInput() or ExecuteQueryWithStreamIO()) is used,
     * then data for insertion to the same external table can be split between multiple QueryInfos.
     * </pre>
     *
     * <code>bytes data = 3;</code>
     */
    public com.google.protobuf.ByteString getData() {
      return data_;
    }

    public static final int FORMAT_FIELD_NUMBER = 4;
    private volatile java.lang.Object format_;
    /**
     * <pre>
     * Format of the data to insert to the external table.
     * </pre>
     *
     * <code>string format = 4;</code>
     */
    public java.lang.String getFormat() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        format_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Format of the data to insert to the external table.
     * </pre>
     *
     * <code>string format = 4;</code>
     */
    public com.google.protobuf.ByteString
        getFormatBytes() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        format_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COMPRESSION_TYPE_FIELD_NUMBER = 6;
    private volatile java.lang.Object compressionType_;
    /**
     * <pre>
     * Compression type used to compress `data`.
     * Supported values: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
     * </pre>
     *
     * <code>string compression_type = 6;</code>
     */
    public java.lang.String getCompressionType() {
      java.lang.Object ref = compressionType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        compressionType_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Compression type used to compress `data`.
     * Supported values: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
     * </pre>
     *
     * <code>string compression_type = 6;</code>
     */
    public com.google.protobuf.ByteString
        getCompressionTypeBytes() {
      java.lang.Object ref = compressionType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        compressionType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SETTINGS_FIELD_NUMBER = 5;
    private static final class SettingsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  ClickhouseGrpc.internal_static_clickhouse_grpc_ExternalTable_SettingsEntry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> settings_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetSettings() {
      if (settings_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            SettingsDefaultEntryHolder.defaultEntry);
      }
      return settings_;
    }

    public int getSettingsCount() {
      return internalGetSettings().getMap().size();
    }
    /**
     * <pre>
     * Settings for executing that insertion, applied after QueryInfo.settings.
     * </pre>
     *
     * <code>map&lt;string, string&gt; settings = 5;</code>
     */

    public boolean containsSettings(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetSettings().getMap().containsKey(key);
    }
    /**
     * Use {@link #getSettingsMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getSettings() {
      return getSettingsMap();
    }
    /**
     * <pre>
     * Settings for executing that insertion, applied after QueryInfo.settings.
     * </pre>
     *
     * <code>map&lt;string, string&gt; settings = 5;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getSettingsMap() {
      return internalGetSettings().getMap();
    }
    /**
     * <pre>
     * Settings for executing that insertion, applied after QueryInfo.settings.
     * </pre>
     *
     * <code>map&lt;string, string&gt; settings = 5;</code>
     */

    public java.lang.String getSettingsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetSettings().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Settings for executing that insertion, applied after QueryInfo.settings.
     * </pre>
     *
     * <code>map&lt;string, string&gt; settings = 5;</code>
     */

    public java.lang.String getSettingsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetSettings().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      for (int i = 0; i < columns_.size(); i++) {
        output.writeMessage(2, columns_.get(i));
      }
      if (!data_.isEmpty()) {
        output.writeBytes(3, data_);
      }
      if (!getFormatBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, format_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetSettings(),
          SettingsDefaultEntryHolder.defaultEntry,
          5);
      if (!getCompressionTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, compressionType_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      for (int i = 0; i < columns_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, columns_.get(i));
      }
      if (!data_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, data_);
      }
      if (!getFormatBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, format_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetSettings().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        settings__ = SettingsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, settings__);
      }
      if (!getCompressionTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, compressionType_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ClickhouseGrpc.ExternalTable)) {
        return super.equals(obj);
      }
      ClickhouseGrpc.ExternalTable other = (ClickhouseGrpc.ExternalTable) obj;

      boolean result = true;
      result = result && getName()
          .equals(other.getName());
      result = result && getColumnsList()
          .equals(other.getColumnsList());
      result = result && getData()
          .equals(other.getData());
      result = result && getFormat()
          .equals(other.getFormat());
      result = result && getCompressionType()
          .equals(other.getCompressionType());
      result = result && internalGetSettings().equals(
          other.internalGetSettings());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (getColumnsCount() > 0) {
        hash = (37 * hash) + COLUMNS_FIELD_NUMBER;
        hash = (53 * hash) + getColumnsList().hashCode();
      }
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getData().hashCode();
      hash = (37 * hash) + FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + getFormat().hashCode();
      hash = (37 * hash) + COMPRESSION_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getCompressionType().hashCode();
      if (!internalGetSettings().getMap().isEmpty()) {
        hash = (37 * hash) + SETTINGS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetSettings().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ClickhouseGrpc.ExternalTable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.ExternalTable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.ExternalTable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.ExternalTable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.ExternalTable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.ExternalTable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.ExternalTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.ExternalTable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.ExternalTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.ExternalTable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.ExternalTable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.ExternalTable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ClickhouseGrpc.ExternalTable prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Describes an external table - a table which will exists only while a query is executing.
     * </pre>
     *
     * Protobuf type {@code clickhouse.grpc.ExternalTable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clickhouse.grpc.ExternalTable)
        ClickhouseGrpc.ExternalTableOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_ExternalTable_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 5:
            return internalGetSettings();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 5:
            return internalGetMutableSettings();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_ExternalTable_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ClickhouseGrpc.ExternalTable.class, ClickhouseGrpc.ExternalTable.Builder.class);
      }

      // Construct using clickhouse.grpc.ClickhouseGrpc.ExternalTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getColumnsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";

        if (columnsBuilder_ == null) {
          columns_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          columnsBuilder_.clear();
        }
        data_ = com.google.protobuf.ByteString.EMPTY;

        format_ = "";

        compressionType_ = "";

        internalGetMutableSettings().clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_ExternalTable_descriptor;
      }

      public ClickhouseGrpc.ExternalTable getDefaultInstanceForType() {
        return ClickhouseGrpc.ExternalTable.getDefaultInstance();
      }

      public ClickhouseGrpc.ExternalTable build() {
        ClickhouseGrpc.ExternalTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ClickhouseGrpc.ExternalTable buildPartial() {
        ClickhouseGrpc.ExternalTable result = new ClickhouseGrpc.ExternalTable(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.name_ = name_;
        if (columnsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            columns_ = java.util.Collections.unmodifiableList(columns_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.columns_ = columns_;
        } else {
          result.columns_ = columnsBuilder_.build();
        }
        result.data_ = data_;
        result.format_ = format_;
        result.compressionType_ = compressionType_;
        result.settings_ = internalGetSettings();
        result.settings_.makeImmutable();
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ClickhouseGrpc.ExternalTable) {
          return mergeFrom((ClickhouseGrpc.ExternalTable)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ClickhouseGrpc.ExternalTable other) {
        if (other == ClickhouseGrpc.ExternalTable.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (columnsBuilder_ == null) {
          if (!other.columns_.isEmpty()) {
            if (columns_.isEmpty()) {
              columns_ = other.columns_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureColumnsIsMutable();
              columns_.addAll(other.columns_);
            }
            onChanged();
          }
        } else {
          if (!other.columns_.isEmpty()) {
            if (columnsBuilder_.isEmpty()) {
              columnsBuilder_.dispose();
              columnsBuilder_ = null;
              columns_ = other.columns_;
              bitField0_ = (bitField0_ & ~0x00000002);
              columnsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getColumnsFieldBuilder() : null;
            } else {
              columnsBuilder_.addAllMessages(other.columns_);
            }
          }
        }
        if (other.getData() != com.google.protobuf.ByteString.EMPTY) {
          setData(other.getData());
        }
        if (!other.getFormat().isEmpty()) {
          format_ = other.format_;
          onChanged();
        }
        if (!other.getCompressionType().isEmpty()) {
          compressionType_ = other.compressionType_;
          onChanged();
        }
        internalGetMutableSettings().mergeFrom(
            other.internalGetSettings());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ClickhouseGrpc.ExternalTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ClickhouseGrpc.ExternalTable) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name of the table. If omitted, "_data" is used.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the table. If omitted, "_data" is used.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the table. If omitted, "_data" is used.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the table. If omitted, "_data" is used.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder clearName() {

        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the table. If omitted, "_data" is used.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        name_ = value;
        onChanged();
        return this;
      }

      private java.util.List<ClickhouseGrpc.NameAndType> columns_ =
        java.util.Collections.emptyList();
      private void ensureColumnsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          columns_ = new java.util.ArrayList<ClickhouseGrpc.NameAndType>(columns_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          ClickhouseGrpc.NameAndType, ClickhouseGrpc.NameAndType.Builder, ClickhouseGrpc.NameAndTypeOrBuilder> columnsBuilder_;

      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public java.util.List<ClickhouseGrpc.NameAndType> getColumnsList() {
        if (columnsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(columns_);
        } else {
          return columnsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public int getColumnsCount() {
        if (columnsBuilder_ == null) {
          return columns_.size();
        } else {
          return columnsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public ClickhouseGrpc.NameAndType getColumns(int index) {
        if (columnsBuilder_ == null) {
          return columns_.get(index);
        } else {
          return columnsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public Builder setColumns(
          int index, ClickhouseGrpc.NameAndType value) {
        if (columnsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnsIsMutable();
          columns_.set(index, value);
          onChanged();
        } else {
          columnsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public Builder setColumns(
          int index, ClickhouseGrpc.NameAndType.Builder builderForValue) {
        if (columnsBuilder_ == null) {
          ensureColumnsIsMutable();
          columns_.set(index, builderForValue.build());
          onChanged();
        } else {
          columnsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public Builder addColumns(ClickhouseGrpc.NameAndType value) {
        if (columnsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnsIsMutable();
          columns_.add(value);
          onChanged();
        } else {
          columnsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public Builder addColumns(
          int index, ClickhouseGrpc.NameAndType value) {
        if (columnsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureColumnsIsMutable();
          columns_.add(index, value);
          onChanged();
        } else {
          columnsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public Builder addColumns(
          ClickhouseGrpc.NameAndType.Builder builderForValue) {
        if (columnsBuilder_ == null) {
          ensureColumnsIsMutable();
          columns_.add(builderForValue.build());
          onChanged();
        } else {
          columnsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public Builder addColumns(
          int index, ClickhouseGrpc.NameAndType.Builder builderForValue) {
        if (columnsBuilder_ == null) {
          ensureColumnsIsMutable();
          columns_.add(index, builderForValue.build());
          onChanged();
        } else {
          columnsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public Builder addAllColumns(
          java.lang.Iterable<? extends ClickhouseGrpc.NameAndType> values) {
        if (columnsBuilder_ == null) {
          ensureColumnsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, columns_);
          onChanged();
        } else {
          columnsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public Builder clearColumns() {
        if (columnsBuilder_ == null) {
          columns_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          columnsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public Builder removeColumns(int index) {
        if (columnsBuilder_ == null) {
          ensureColumnsIsMutable();
          columns_.remove(index);
          onChanged();
        } else {
          columnsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public ClickhouseGrpc.NameAndType.Builder getColumnsBuilder(
          int index) {
        return getColumnsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public ClickhouseGrpc.NameAndTypeOrBuilder getColumnsOrBuilder(
          int index) {
        if (columnsBuilder_ == null) {
          return columns_.get(index);  } else {
          return columnsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public java.util.List<? extends ClickhouseGrpc.NameAndTypeOrBuilder>
           getColumnsOrBuilderList() {
        if (columnsBuilder_ != null) {
          return columnsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(columns_);
        }
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public ClickhouseGrpc.NameAndType.Builder addColumnsBuilder() {
        return getColumnsFieldBuilder().addBuilder(
            ClickhouseGrpc.NameAndType.getDefaultInstance());
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public ClickhouseGrpc.NameAndType.Builder addColumnsBuilder(
          int index) {
        return getColumnsFieldBuilder().addBuilder(
            index, ClickhouseGrpc.NameAndType.getDefaultInstance());
      }
      /**
       * <pre>
       * Columns of the table. Types are required, names can be omitted. If the names are omitted, "_1", "_2", ... is used.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType columns = 2;</code>
       */
      public java.util.List<ClickhouseGrpc.NameAndType.Builder>
           getColumnsBuilderList() {
        return getColumnsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          ClickhouseGrpc.NameAndType, ClickhouseGrpc.NameAndType.Builder, ClickhouseGrpc.NameAndTypeOrBuilder>
          getColumnsFieldBuilder() {
        if (columnsBuilder_ == null) {
          columnsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              ClickhouseGrpc.NameAndType, ClickhouseGrpc.NameAndType.Builder, ClickhouseGrpc.NameAndTypeOrBuilder>(
                  columns_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          columns_ = null;
        }
        return columnsBuilder_;
      }

      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Data to insert to the external table.
       * If a method with streaming input (i.e. ExecuteQueryWithStreamInput() or ExecuteQueryWithStreamIO()) is used,
       * then data for insertion to the same external table can be split between multiple QueryInfos.
       * </pre>
       *
       * <code>bytes data = 3;</code>
       */
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <pre>
       * Data to insert to the external table.
       * If a method with streaming input (i.e. ExecuteQueryWithStreamInput() or ExecuteQueryWithStreamIO()) is used,
       * then data for insertion to the same external table can be split between multiple QueryInfos.
       * </pre>
       *
       * <code>bytes data = 3;</code>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }

        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data to insert to the external table.
       * If a method with streaming input (i.e. ExecuteQueryWithStreamInput() or ExecuteQueryWithStreamIO()) is used,
       * then data for insertion to the same external table can be split between multiple QueryInfos.
       * </pre>
       *
       * <code>bytes data = 3;</code>
       */
      public Builder clearData() {

        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }

      private java.lang.Object format_ = "";
      /**
       * <pre>
       * Format of the data to insert to the external table.
       * </pre>
       *
       * <code>string format = 4;</code>
       */
      public java.lang.String getFormat() {
        java.lang.Object ref = format_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          format_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Format of the data to insert to the external table.
       * </pre>
       *
       * <code>string format = 4;</code>
       */
      public com.google.protobuf.ByteString
          getFormatBytes() {
        java.lang.Object ref = format_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          format_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Format of the data to insert to the external table.
       * </pre>
       *
       * <code>string format = 4;</code>
       */
      public Builder setFormat(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        format_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Format of the data to insert to the external table.
       * </pre>
       *
       * <code>string format = 4;</code>
       */
      public Builder clearFormat() {

        format_ = getDefaultInstance().getFormat();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Format of the data to insert to the external table.
       * </pre>
       *
       * <code>string format = 4;</code>
       */
      public Builder setFormatBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        format_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object compressionType_ = "";
      /**
       * <pre>
       * Compression type used to compress `data`.
       * Supported values: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * </pre>
       *
       * <code>string compression_type = 6;</code>
       */
      public java.lang.String getCompressionType() {
        java.lang.Object ref = compressionType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          compressionType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Compression type used to compress `data`.
       * Supported values: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * </pre>
       *
       * <code>string compression_type = 6;</code>
       */
      public com.google.protobuf.ByteString
          getCompressionTypeBytes() {
        java.lang.Object ref = compressionType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          compressionType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Compression type used to compress `data`.
       * Supported values: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * </pre>
       *
       * <code>string compression_type = 6;</code>
       */
      public Builder setCompressionType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        compressionType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Compression type used to compress `data`.
       * Supported values: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * </pre>
       *
       * <code>string compression_type = 6;</code>
       */
      public Builder clearCompressionType() {

        compressionType_ = getDefaultInstance().getCompressionType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Compression type used to compress `data`.
       * Supported values: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * </pre>
       *
       * <code>string compression_type = 6;</code>
       */
      public Builder setCompressionTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        compressionType_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> settings_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetSettings() {
        if (settings_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              SettingsDefaultEntryHolder.defaultEntry);
        }
        return settings_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableSettings() {
        onChanged();;
        if (settings_ == null) {
          settings_ = com.google.protobuf.MapField.newMapField(
              SettingsDefaultEntryHolder.defaultEntry);
        }
        if (!settings_.isMutable()) {
          settings_ = settings_.copy();
        }
        return settings_;
      }

      public int getSettingsCount() {
        return internalGetSettings().getMap().size();
      }
      /**
       * <pre>
       * Settings for executing that insertion, applied after QueryInfo.settings.
       * </pre>
       *
       * <code>map&lt;string, string&gt; settings = 5;</code>
       */

      public boolean containsSettings(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetSettings().getMap().containsKey(key);
      }
      /**
       * Use {@link #getSettingsMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getSettings() {
        return getSettingsMap();
      }
      /**
       * <pre>
       * Settings for executing that insertion, applied after QueryInfo.settings.
       * </pre>
       *
       * <code>map&lt;string, string&gt; settings = 5;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getSettingsMap() {
        return internalGetSettings().getMap();
      }
      /**
       * <pre>
       * Settings for executing that insertion, applied after QueryInfo.settings.
       * </pre>
       *
       * <code>map&lt;string, string&gt; settings = 5;</code>
       */

      public java.lang.String getSettingsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetSettings().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Settings for executing that insertion, applied after QueryInfo.settings.
       * </pre>
       *
       * <code>map&lt;string, string&gt; settings = 5;</code>
       */

      public java.lang.String getSettingsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetSettings().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearSettings() {
        internalGetMutableSettings().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Settings for executing that insertion, applied after QueryInfo.settings.
       * </pre>
       *
       * <code>map&lt;string, string&gt; settings = 5;</code>
       */

      public Builder removeSettings(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableSettings().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableSettings() {
        return internalGetMutableSettings().getMutableMap();
      }
      /**
       * <pre>
       * Settings for executing that insertion, applied after QueryInfo.settings.
       * </pre>
       *
       * <code>map&lt;string, string&gt; settings = 5;</code>
       */
      public Builder putSettings(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableSettings().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * Settings for executing that insertion, applied after QueryInfo.settings.
       * </pre>
       *
       * <code>map&lt;string, string&gt; settings = 5;</code>
       */

      public Builder putAllSettings(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableSettings().getMutableMap()
            .putAll(values);
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clickhouse.grpc.ExternalTable)
    }

    // @@protoc_insertion_point(class_scope:clickhouse.grpc.ExternalTable)
    private static final ClickhouseGrpc.ExternalTable DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ClickhouseGrpc.ExternalTable();
    }

    public static ClickhouseGrpc.ExternalTable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExternalTable>
        PARSER = new com.google.protobuf.AbstractParser<ExternalTable>() {
      public ExternalTable parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ExternalTable(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ExternalTable> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExternalTable> getParserForType() {
      return PARSER;
    }

    public ClickhouseGrpc.ExternalTable getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ObsoleteTransportCompressionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clickhouse.grpc.ObsoleteTransportCompression)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionAlgorithm algorithm = 1;</code>
     */
    int getAlgorithmValue();
    /**
     * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionAlgorithm algorithm = 1;</code>
     */
    ClickhouseGrpc.ObsoleteTransportCompression.CompressionAlgorithm getAlgorithm();

    /**
     * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionLevel level = 2;</code>
     */
    int getLevelValue();
    /**
     * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionLevel level = 2;</code>
     */
    ClickhouseGrpc.ObsoleteTransportCompression.CompressionLevel getLevel();
  }
  /**
   * Protobuf type {@code clickhouse.grpc.ObsoleteTransportCompression}
   */
  public  static final class ObsoleteTransportCompression extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clickhouse.grpc.ObsoleteTransportCompression)
      ObsoleteTransportCompressionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ObsoleteTransportCompression.newBuilder() to construct.
    private ObsoleteTransportCompression(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ObsoleteTransportCompression() {
      algorithm_ = 0;
      level_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ObsoleteTransportCompression(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              algorithm_ = rawValue;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              level_ = rawValue;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_ObsoleteTransportCompression_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_ObsoleteTransportCompression_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ClickhouseGrpc.ObsoleteTransportCompression.class, ClickhouseGrpc.ObsoleteTransportCompression.Builder.class);
    }

    /**
     * Protobuf enum {@code clickhouse.grpc.ObsoleteTransportCompression.CompressionAlgorithm}
     */
    public enum CompressionAlgorithm
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NO_COMPRESSION = 0;</code>
       */
      NO_COMPRESSION(0),
      /**
       * <code>DEFLATE = 1;</code>
       */
      DEFLATE(1),
      /**
       * <code>GZIP = 2;</code>
       */
      GZIP(2),
      /**
       * <code>STREAM_GZIP = 3;</code>
       */
      STREAM_GZIP(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>NO_COMPRESSION = 0;</code>
       */
      public static final int NO_COMPRESSION_VALUE = 0;
      /**
       * <code>DEFLATE = 1;</code>
       */
      public static final int DEFLATE_VALUE = 1;
      /**
       * <code>GZIP = 2;</code>
       */
      public static final int GZIP_VALUE = 2;
      /**
       * <code>STREAM_GZIP = 3;</code>
       */
      public static final int STREAM_GZIP_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CompressionAlgorithm valueOf(int value) {
        return forNumber(value);
      }

      public static CompressionAlgorithm forNumber(int value) {
        switch (value) {
          case 0: return NO_COMPRESSION;
          case 1: return DEFLATE;
          case 2: return GZIP;
          case 3: return STREAM_GZIP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CompressionAlgorithm>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          CompressionAlgorithm> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CompressionAlgorithm>() {
              public CompressionAlgorithm findValueByNumber(int number) {
                return CompressionAlgorithm.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return ClickhouseGrpc.ObsoleteTransportCompression.getDescriptor().getEnumTypes().get(0);
      }

      private static final CompressionAlgorithm[] VALUES = values();

      public static CompressionAlgorithm valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private CompressionAlgorithm(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:clickhouse.grpc.ObsoleteTransportCompression.CompressionAlgorithm)
    }

    /**
     * Protobuf enum {@code clickhouse.grpc.ObsoleteTransportCompression.CompressionLevel}
     */
    public enum CompressionLevel
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>COMPRESSION_NONE = 0;</code>
       */
      COMPRESSION_NONE(0),
      /**
       * <code>COMPRESSION_LOW = 1;</code>
       */
      COMPRESSION_LOW(1),
      /**
       * <code>COMPRESSION_MEDIUM = 2;</code>
       */
      COMPRESSION_MEDIUM(2),
      /**
       * <code>COMPRESSION_HIGH = 3;</code>
       */
      COMPRESSION_HIGH(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>COMPRESSION_NONE = 0;</code>
       */
      public static final int COMPRESSION_NONE_VALUE = 0;
      /**
       * <code>COMPRESSION_LOW = 1;</code>
       */
      public static final int COMPRESSION_LOW_VALUE = 1;
      /**
       * <code>COMPRESSION_MEDIUM = 2;</code>
       */
      public static final int COMPRESSION_MEDIUM_VALUE = 2;
      /**
       * <code>COMPRESSION_HIGH = 3;</code>
       */
      public static final int COMPRESSION_HIGH_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CompressionLevel valueOf(int value) {
        return forNumber(value);
      }

      public static CompressionLevel forNumber(int value) {
        switch (value) {
          case 0: return COMPRESSION_NONE;
          case 1: return COMPRESSION_LOW;
          case 2: return COMPRESSION_MEDIUM;
          case 3: return COMPRESSION_HIGH;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CompressionLevel>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          CompressionLevel> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CompressionLevel>() {
              public CompressionLevel findValueByNumber(int number) {
                return CompressionLevel.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return ClickhouseGrpc.ObsoleteTransportCompression.getDescriptor().getEnumTypes().get(1);
      }

      private static final CompressionLevel[] VALUES = values();

      public static CompressionLevel valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private CompressionLevel(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:clickhouse.grpc.ObsoleteTransportCompression.CompressionLevel)
    }

    public static final int ALGORITHM_FIELD_NUMBER = 1;
    private int algorithm_;
    /**
     * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionAlgorithm algorithm = 1;</code>
     */
    public int getAlgorithmValue() {
      return algorithm_;
    }
    /**
     * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionAlgorithm algorithm = 1;</code>
     */
    public ClickhouseGrpc.ObsoleteTransportCompression.CompressionAlgorithm getAlgorithm() {
      ClickhouseGrpc.ObsoleteTransportCompression.CompressionAlgorithm result = ClickhouseGrpc.ObsoleteTransportCompression.CompressionAlgorithm.valueOf(algorithm_);
      return result == null ? ClickhouseGrpc.ObsoleteTransportCompression.CompressionAlgorithm.UNRECOGNIZED : result;
    }

    public static final int LEVEL_FIELD_NUMBER = 2;
    private int level_;
    /**
     * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionLevel level = 2;</code>
     */
    public int getLevelValue() {
      return level_;
    }
    /**
     * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionLevel level = 2;</code>
     */
    public ClickhouseGrpc.ObsoleteTransportCompression.CompressionLevel getLevel() {
      ClickhouseGrpc.ObsoleteTransportCompression.CompressionLevel result = ClickhouseGrpc.ObsoleteTransportCompression.CompressionLevel.valueOf(level_);
      return result == null ? ClickhouseGrpc.ObsoleteTransportCompression.CompressionLevel.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (algorithm_ != ClickhouseGrpc.ObsoleteTransportCompression.CompressionAlgorithm.NO_COMPRESSION.getNumber()) {
        output.writeEnum(1, algorithm_);
      }
      if (level_ != ClickhouseGrpc.ObsoleteTransportCompression.CompressionLevel.COMPRESSION_NONE.getNumber()) {
        output.writeEnum(2, level_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (algorithm_ != ClickhouseGrpc.ObsoleteTransportCompression.CompressionAlgorithm.NO_COMPRESSION.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, algorithm_);
      }
      if (level_ != ClickhouseGrpc.ObsoleteTransportCompression.CompressionLevel.COMPRESSION_NONE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, level_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ClickhouseGrpc.ObsoleteTransportCompression)) {
        return super.equals(obj);
      }
      ClickhouseGrpc.ObsoleteTransportCompression other = (ClickhouseGrpc.ObsoleteTransportCompression) obj;

      boolean result = true;
      result = result && algorithm_ == other.algorithm_;
      result = result && level_ == other.level_;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ALGORITHM_FIELD_NUMBER;
      hash = (53 * hash) + algorithm_;
      hash = (37 * hash) + LEVEL_FIELD_NUMBER;
      hash = (53 * hash) + level_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ClickhouseGrpc.ObsoleteTransportCompression parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.ObsoleteTransportCompression parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.ObsoleteTransportCompression parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.ObsoleteTransportCompression parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.ObsoleteTransportCompression parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.ObsoleteTransportCompression parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.ObsoleteTransportCompression parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.ObsoleteTransportCompression parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.ObsoleteTransportCompression parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.ObsoleteTransportCompression parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.ObsoleteTransportCompression parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.ObsoleteTransportCompression parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ClickhouseGrpc.ObsoleteTransportCompression prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code clickhouse.grpc.ObsoleteTransportCompression}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clickhouse.grpc.ObsoleteTransportCompression)
        ClickhouseGrpc.ObsoleteTransportCompressionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_ObsoleteTransportCompression_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_ObsoleteTransportCompression_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ClickhouseGrpc.ObsoleteTransportCompression.class, ClickhouseGrpc.ObsoleteTransportCompression.Builder.class);
      }

      // Construct using clickhouse.grpc.ClickhouseGrpc.ObsoleteTransportCompression.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        algorithm_ = 0;

        level_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_ObsoleteTransportCompression_descriptor;
      }

      public ClickhouseGrpc.ObsoleteTransportCompression getDefaultInstanceForType() {
        return ClickhouseGrpc.ObsoleteTransportCompression.getDefaultInstance();
      }

      public ClickhouseGrpc.ObsoleteTransportCompression build() {
        ClickhouseGrpc.ObsoleteTransportCompression result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ClickhouseGrpc.ObsoleteTransportCompression buildPartial() {
        ClickhouseGrpc.ObsoleteTransportCompression result = new ClickhouseGrpc.ObsoleteTransportCompression(this);
        result.algorithm_ = algorithm_;
        result.level_ = level_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ClickhouseGrpc.ObsoleteTransportCompression) {
          return mergeFrom((ClickhouseGrpc.ObsoleteTransportCompression)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ClickhouseGrpc.ObsoleteTransportCompression other) {
        if (other == ClickhouseGrpc.ObsoleteTransportCompression.getDefaultInstance()) return this;
        if (other.algorithm_ != 0) {
          setAlgorithmValue(other.getAlgorithmValue());
        }
        if (other.level_ != 0) {
          setLevelValue(other.getLevelValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ClickhouseGrpc.ObsoleteTransportCompression parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ClickhouseGrpc.ObsoleteTransportCompression) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int algorithm_ = 0;
      /**
       * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionAlgorithm algorithm = 1;</code>
       */
      public int getAlgorithmValue() {
        return algorithm_;
      }
      /**
       * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionAlgorithm algorithm = 1;</code>
       */
      public Builder setAlgorithmValue(int value) {
        algorithm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionAlgorithm algorithm = 1;</code>
       */
      public ClickhouseGrpc.ObsoleteTransportCompression.CompressionAlgorithm getAlgorithm() {
        ClickhouseGrpc.ObsoleteTransportCompression.CompressionAlgorithm result = ClickhouseGrpc.ObsoleteTransportCompression.CompressionAlgorithm.valueOf(algorithm_);
        return result == null ? ClickhouseGrpc.ObsoleteTransportCompression.CompressionAlgorithm.UNRECOGNIZED : result;
      }
      /**
       * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionAlgorithm algorithm = 1;</code>
       */
      public Builder setAlgorithm(ClickhouseGrpc.ObsoleteTransportCompression.CompressionAlgorithm value) {
        if (value == null) {
          throw new NullPointerException();
        }

        algorithm_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionAlgorithm algorithm = 1;</code>
       */
      public Builder clearAlgorithm() {

        algorithm_ = 0;
        onChanged();
        return this;
      }

      private int level_ = 0;
      /**
       * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionLevel level = 2;</code>
       */
      public int getLevelValue() {
        return level_;
      }
      /**
       * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionLevel level = 2;</code>
       */
      public Builder setLevelValue(int value) {
        level_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionLevel level = 2;</code>
       */
      public ClickhouseGrpc.ObsoleteTransportCompression.CompressionLevel getLevel() {
        ClickhouseGrpc.ObsoleteTransportCompression.CompressionLevel result = ClickhouseGrpc.ObsoleteTransportCompression.CompressionLevel.valueOf(level_);
        return result == null ? ClickhouseGrpc.ObsoleteTransportCompression.CompressionLevel.UNRECOGNIZED : result;
      }
      /**
       * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionLevel level = 2;</code>
       */
      public Builder setLevel(ClickhouseGrpc.ObsoleteTransportCompression.CompressionLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }

        level_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.clickhouse.grpc.ObsoleteTransportCompression.CompressionLevel level = 2;</code>
       */
      public Builder clearLevel() {

        level_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clickhouse.grpc.ObsoleteTransportCompression)
    }

    // @@protoc_insertion_point(class_scope:clickhouse.grpc.ObsoleteTransportCompression)
    private static final ClickhouseGrpc.ObsoleteTransportCompression DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ClickhouseGrpc.ObsoleteTransportCompression();
    }

    public static ClickhouseGrpc.ObsoleteTransportCompression getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ObsoleteTransportCompression>
        PARSER = new com.google.protobuf.AbstractParser<ObsoleteTransportCompression>() {
      public ObsoleteTransportCompression parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ObsoleteTransportCompression(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ObsoleteTransportCompression> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ObsoleteTransportCompression> getParserForType() {
      return PARSER;
    }

    public ClickhouseGrpc.ObsoleteTransportCompression getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface QueryInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clickhouse.grpc.QueryInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string query = 1;</code>
     */
    java.lang.String getQuery();
    /**
     * <code>string query = 1;</code>
     */
    com.google.protobuf.ByteString
        getQueryBytes();

    /**
     * <code>string query_id = 2;</code>
     */
    java.lang.String getQueryId();
    /**
     * <code>string query_id = 2;</code>
     */
    com.google.protobuf.ByteString
        getQueryIdBytes();

    /**
     * <code>map&lt;string, string&gt; settings = 3;</code>
     */
    int getSettingsCount();
    /**
     * <code>map&lt;string, string&gt; settings = 3;</code>
     */
    boolean containsSettings(
        java.lang.String key);
    /**
     * Use {@link #getSettingsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getSettings();
    /**
     * <code>map&lt;string, string&gt; settings = 3;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getSettingsMap();
    /**
     * <code>map&lt;string, string&gt; settings = 3;</code>
     */

    java.lang.String getSettingsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; settings = 3;</code>
     */

    java.lang.String getSettingsOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * Default database.
     * </pre>
     *
     * <code>string database = 4;</code>
     */
    java.lang.String getDatabase();
    /**
     * <pre>
     * Default database.
     * </pre>
     *
     * <code>string database = 4;</code>
     */
    com.google.protobuf.ByteString
        getDatabaseBytes();

    /**
     * <pre>
     * Input data, used both as data for INSERT query and as data for the input() function.
     * </pre>
     *
     * <code>bytes input_data = 5;</code>
     */
    com.google.protobuf.ByteString getInputData();

    /**
     * <pre>
     * Delimiter for input_data, inserted between input_data from adjacent QueryInfos.
     * </pre>
     *
     * <code>bytes input_data_delimiter = 6;</code>
     */
    com.google.protobuf.ByteString getInputDataDelimiter();

    /**
     * <pre>
     * Default output format. If not specified, 'TabSeparated' is used.
     * </pre>
     *
     * <code>string output_format = 7;</code>
     */
    java.lang.String getOutputFormat();
    /**
     * <pre>
     * Default output format. If not specified, 'TabSeparated' is used.
     * </pre>
     *
     * <code>string output_format = 7;</code>
     */
    com.google.protobuf.ByteString
        getOutputFormatBytes();

    /**
     * <pre>
     * Set it if you want the names and the types of output columns to be sent to the client.
     * </pre>
     *
     * <code>bool send_output_columns = 24;</code>
     */
    boolean getSendOutputColumns();

    /**
     * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
     */
    java.util.List<ClickhouseGrpc.ExternalTable>
        getExternalTablesList();
    /**
     * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
     */
    ClickhouseGrpc.ExternalTable getExternalTables(int index);
    /**
     * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
     */
    int getExternalTablesCount();
    /**
     * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
     */
    java.util.List<? extends ClickhouseGrpc.ExternalTableOrBuilder>
        getExternalTablesOrBuilderList();
    /**
     * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
     */
    ClickhouseGrpc.ExternalTableOrBuilder getExternalTablesOrBuilder(
        int index);

    /**
     * <code>string user_name = 9;</code>
     */
    java.lang.String getUserName();
    /**
     * <code>string user_name = 9;</code>
     */
    com.google.protobuf.ByteString
        getUserNameBytes();

    /**
     * <code>string password = 10;</code>
     */
    java.lang.String getPassword();
    /**
     * <code>string password = 10;</code>
     */
    com.google.protobuf.ByteString
        getPasswordBytes();

    /**
     * <code>string quota = 11;</code>
     */
    java.lang.String getQuota();
    /**
     * <code>string quota = 11;</code>
     */
    com.google.protobuf.ByteString
        getQuotaBytes();

    /**
     * <pre>
     * Works exactly like sessions in the HTTP protocol.
     * </pre>
     *
     * <code>string session_id = 12;</code>
     */
    java.lang.String getSessionId();
    /**
     * <pre>
     * Works exactly like sessions in the HTTP protocol.
     * </pre>
     *
     * <code>string session_id = 12;</code>
     */
    com.google.protobuf.ByteString
        getSessionIdBytes();

    /**
     * <code>bool session_check = 13;</code>
     */
    boolean getSessionCheck();

    /**
     * <code>uint32 session_timeout = 14;</code>
     */
    int getSessionTimeout();

    /**
     * <pre>
     * Set `cancel` to true to stop executing the query.
     * </pre>
     *
     * <code>bool cancel = 15;</code>
     */
    boolean getCancel();

    /**
     * <pre>
     * If true there will be at least one more QueryInfo in the input stream.
     * `next_query_info` is allowed to be set only if a method with streaming input (i.e. ExecuteQueryWithStreamInput() or ExecuteQueryWithStreamIO()) is used.
     * </pre>
     *
     * <code>bool next_query_info = 16;</code>
     */
    boolean getNextQueryInfo();

    /**
     * <pre>
     * Compression type for `input_data`.
     * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
     * The client is responsible to compress data before putting it into `input_data`.
     * </pre>
     *
     * <code>string input_compression_type = 20;</code>
     */
    java.lang.String getInputCompressionType();
    /**
     * <pre>
     * Compression type for `input_data`.
     * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
     * The client is responsible to compress data before putting it into `input_data`.
     * </pre>
     *
     * <code>string input_compression_type = 20;</code>
     */
    com.google.protobuf.ByteString
        getInputCompressionTypeBytes();

    /**
     * <pre>
     * Compression type for `output_data`, `totals` and `extremes`.
     * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
     * The client receives compressed data and should decompress it by itself.
     * Consider also setting `output_compression_level`.
     * </pre>
     *
     * <code>string output_compression_type = 21;</code>
     */
    java.lang.String getOutputCompressionType();
    /**
     * <pre>
     * Compression type for `output_data`, `totals` and `extremes`.
     * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
     * The client receives compressed data and should decompress it by itself.
     * Consider also setting `output_compression_level`.
     * </pre>
     *
     * <code>string output_compression_type = 21;</code>
     */
    com.google.protobuf.ByteString
        getOutputCompressionTypeBytes();

    /**
     * <pre>
     * Compression level.
     * WARNING: If it's not specified the compression level is set to zero by default which might be not the best choice for some compression types (see below).
     * The compression level should be in the following range (the higher the number, the better the compression):
     * none: compression level isn't used
     * gzip: 0..9; 0 means no compression, 6 is recommended by default (compression level -1 also means 6)
     * brotli: 0..11
     * lzma: 0..9; 6 is recommended by default
     * zstd: 1..22; 3 is recommended by default (compression level 0 also means 3)
     * lz4: 0..16; values &lt; 0 mean fast acceleration
     * bz2: 1..9
     * </pre>
     *
     * <code>int32 output_compression_level = 19;</code>
     */
    int getOutputCompressionLevel();

    /**
     * <pre>
     * Transport compression is an alternative way to make the server to compress its response.
     * This kind of compression implies that instead of compressing just `output` the server will compress whole packed messages of the `Result` type,
     * and then gRPC implementation on client side will decompress those messages so client code won't be bothered with decompression.
     * Here is a big difference between the transport compression and the compression enabled by setting `output_compression_type` because
     * in case of the transport compression the client code receives already decompressed data in `output`.
     * If the transport compression is not set here it can still be enabled by the server configuration.
     * Supported compression types: none, deflate, gzip, stream_gzip
     * Supported compression levels: 0..3
     * WARNING: Don't set `transport_compression` and `output_compression` at the same time because it will make the server to compress its output twice!
     * </pre>
     *
     * <code>string transport_compression_type = 22;</code>
     */
    java.lang.String getTransportCompressionType();
    /**
     * <pre>
     * Transport compression is an alternative way to make the server to compress its response.
     * This kind of compression implies that instead of compressing just `output` the server will compress whole packed messages of the `Result` type,
     * and then gRPC implementation on client side will decompress those messages so client code won't be bothered with decompression.
     * Here is a big difference between the transport compression and the compression enabled by setting `output_compression_type` because
     * in case of the transport compression the client code receives already decompressed data in `output`.
     * If the transport compression is not set here it can still be enabled by the server configuration.
     * Supported compression types: none, deflate, gzip, stream_gzip
     * Supported compression levels: 0..3
     * WARNING: Don't set `transport_compression` and `output_compression` at the same time because it will make the server to compress its output twice!
     * </pre>
     *
     * <code>string transport_compression_type = 22;</code>
     */
    com.google.protobuf.ByteString
        getTransportCompressionTypeBytes();

    /**
     * <code>int32 transport_compression_level = 23;</code>
     */
    int getTransportCompressionLevel();

    /**
     * <pre>
     *&#47; Obsolete fields, should not be used in new code.
     * </pre>
     *
     * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
     */
    boolean hasObsoleteResultCompression();
    /**
     * <pre>
     *&#47; Obsolete fields, should not be used in new code.
     * </pre>
     *
     * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
     */
    ClickhouseGrpc.ObsoleteTransportCompression getObsoleteResultCompression();
    /**
     * <pre>
     *&#47; Obsolete fields, should not be used in new code.
     * </pre>
     *
     * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
     */
    ClickhouseGrpc.ObsoleteTransportCompressionOrBuilder getObsoleteResultCompressionOrBuilder();

    /**
     * <code>string obsolete_compression_type = 18;</code>
     */
    java.lang.String getObsoleteCompressionType();
    /**
     * <code>string obsolete_compression_type = 18;</code>
     */
    com.google.protobuf.ByteString
        getObsoleteCompressionTypeBytes();
  }
  /**
   * <pre>
   * Information about a query which a client sends to a ClickHouse server.
   * The first QueryInfo can set any of the following fields. Extra QueryInfos only add extra data.
   * In extra QueryInfos only `input_data`, `external_tables`, `next_query_info` and `cancel` fields can be set.
   * </pre>
   *
   * Protobuf type {@code clickhouse.grpc.QueryInfo}
   */
  public  static final class QueryInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clickhouse.grpc.QueryInfo)
      QueryInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use QueryInfo.newBuilder() to construct.
    private QueryInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private QueryInfo() {
      query_ = "";
      queryId_ = "";
      database_ = "";
      inputData_ = com.google.protobuf.ByteString.EMPTY;
      inputDataDelimiter_ = com.google.protobuf.ByteString.EMPTY;
      outputFormat_ = "";
      sendOutputColumns_ = false;
      externalTables_ = java.util.Collections.emptyList();
      userName_ = "";
      password_ = "";
      quota_ = "";
      sessionId_ = "";
      sessionCheck_ = false;
      sessionTimeout_ = 0;
      cancel_ = false;
      nextQueryInfo_ = false;
      inputCompressionType_ = "";
      outputCompressionType_ = "";
      outputCompressionLevel_ = 0;
      transportCompressionType_ = "";
      transportCompressionLevel_ = 0;
      obsoleteCompressionType_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private QueryInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              query_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              queryId_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                settings_ = com.google.protobuf.MapField.newMapField(
                    SettingsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000004;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              settings__ = input.readMessage(
                  SettingsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              settings_.getMutableMap().put(
                  settings__.getKey(), settings__.getValue());
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              database_ = s;
              break;
            }
            case 42: {

              inputData_ = input.readBytes();
              break;
            }
            case 50: {

              inputDataDelimiter_ = input.readBytes();
              break;
            }
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();

              outputFormat_ = s;
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                externalTables_ = new java.util.ArrayList<ClickhouseGrpc.ExternalTable>();
                mutable_bitField0_ |= 0x00000100;
              }
              externalTables_.add(
                  input.readMessage(ClickhouseGrpc.ExternalTable.parser(), extensionRegistry));
              break;
            }
            case 74: {
              java.lang.String s = input.readStringRequireUtf8();

              userName_ = s;
              break;
            }
            case 82: {
              java.lang.String s = input.readStringRequireUtf8();

              password_ = s;
              break;
            }
            case 90: {
              java.lang.String s = input.readStringRequireUtf8();

              quota_ = s;
              break;
            }
            case 98: {
              java.lang.String s = input.readStringRequireUtf8();

              sessionId_ = s;
              break;
            }
            case 104: {

              sessionCheck_ = input.readBool();
              break;
            }
            case 112: {

              sessionTimeout_ = input.readUInt32();
              break;
            }
            case 120: {

              cancel_ = input.readBool();
              break;
            }
            case 128: {

              nextQueryInfo_ = input.readBool();
              break;
            }
            case 138: {
              ClickhouseGrpc.ObsoleteTransportCompression.Builder subBuilder = null;
              if (obsoleteResultCompression_ != null) {
                subBuilder = obsoleteResultCompression_.toBuilder();
              }
              obsoleteResultCompression_ = input.readMessage(ClickhouseGrpc.ObsoleteTransportCompression.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(obsoleteResultCompression_);
                obsoleteResultCompression_ = subBuilder.buildPartial();
              }

              break;
            }
            case 146: {
              java.lang.String s = input.readStringRequireUtf8();

              obsoleteCompressionType_ = s;
              break;
            }
            case 152: {

              outputCompressionLevel_ = input.readInt32();
              break;
            }
            case 162: {
              java.lang.String s = input.readStringRequireUtf8();

              inputCompressionType_ = s;
              break;
            }
            case 170: {
              java.lang.String s = input.readStringRequireUtf8();

              outputCompressionType_ = s;
              break;
            }
            case 178: {
              java.lang.String s = input.readStringRequireUtf8();

              transportCompressionType_ = s;
              break;
            }
            case 184: {

              transportCompressionLevel_ = input.readInt32();
              break;
            }
            case 192: {

              sendOutputColumns_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          externalTables_ = java.util.Collections.unmodifiableList(externalTables_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_QueryInfo_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetSettings();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_QueryInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ClickhouseGrpc.QueryInfo.class, ClickhouseGrpc.QueryInfo.Builder.class);
    }

    private int bitField0_;
    public static final int QUERY_FIELD_NUMBER = 1;
    private volatile java.lang.Object query_;
    /**
     * <code>string query = 1;</code>
     */
    public java.lang.String getQuery() {
      java.lang.Object ref = query_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        query_ = s;
        return s;
      }
    }
    /**
     * <code>string query = 1;</code>
     */
    public com.google.protobuf.ByteString
        getQueryBytes() {
      java.lang.Object ref = query_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        query_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int QUERY_ID_FIELD_NUMBER = 2;
    private volatile java.lang.Object queryId_;
    /**
     * <code>string query_id = 2;</code>
     */
    public java.lang.String getQueryId() {
      java.lang.Object ref = queryId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        queryId_ = s;
        return s;
      }
    }
    /**
     * <code>string query_id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getQueryIdBytes() {
      java.lang.Object ref = queryId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        queryId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SETTINGS_FIELD_NUMBER = 3;
    private static final class SettingsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  ClickhouseGrpc.internal_static_clickhouse_grpc_QueryInfo_SettingsEntry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> settings_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetSettings() {
      if (settings_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            SettingsDefaultEntryHolder.defaultEntry);
      }
      return settings_;
    }

    public int getSettingsCount() {
      return internalGetSettings().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; settings = 3;</code>
     */

    public boolean containsSettings(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetSettings().getMap().containsKey(key);
    }
    /**
     * Use {@link #getSettingsMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getSettings() {
      return getSettingsMap();
    }
    /**
     * <code>map&lt;string, string&gt; settings = 3;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getSettingsMap() {
      return internalGetSettings().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; settings = 3;</code>
     */

    public java.lang.String getSettingsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetSettings().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; settings = 3;</code>
     */

    public java.lang.String getSettingsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetSettings().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int DATABASE_FIELD_NUMBER = 4;
    private volatile java.lang.Object database_;
    /**
     * <pre>
     * Default database.
     * </pre>
     *
     * <code>string database = 4;</code>
     */
    public java.lang.String getDatabase() {
      java.lang.Object ref = database_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        database_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Default database.
     * </pre>
     *
     * <code>string database = 4;</code>
     */
    public com.google.protobuf.ByteString
        getDatabaseBytes() {
      java.lang.Object ref = database_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        database_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INPUT_DATA_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString inputData_;
    /**
     * <pre>
     * Input data, used both as data for INSERT query and as data for the input() function.
     * </pre>
     *
     * <code>bytes input_data = 5;</code>
     */
    public com.google.protobuf.ByteString getInputData() {
      return inputData_;
    }

    public static final int INPUT_DATA_DELIMITER_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString inputDataDelimiter_;
    /**
     * <pre>
     * Delimiter for input_data, inserted between input_data from adjacent QueryInfos.
     * </pre>
     *
     * <code>bytes input_data_delimiter = 6;</code>
     */
    public com.google.protobuf.ByteString getInputDataDelimiter() {
      return inputDataDelimiter_;
    }

    public static final int OUTPUT_FORMAT_FIELD_NUMBER = 7;
    private volatile java.lang.Object outputFormat_;
    /**
     * <pre>
     * Default output format. If not specified, 'TabSeparated' is used.
     * </pre>
     *
     * <code>string output_format = 7;</code>
     */
    public java.lang.String getOutputFormat() {
      java.lang.Object ref = outputFormat_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        outputFormat_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Default output format. If not specified, 'TabSeparated' is used.
     * </pre>
     *
     * <code>string output_format = 7;</code>
     */
    public com.google.protobuf.ByteString
        getOutputFormatBytes() {
      java.lang.Object ref = outputFormat_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        outputFormat_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SEND_OUTPUT_COLUMNS_FIELD_NUMBER = 24;
    private boolean sendOutputColumns_;
    /**
     * <pre>
     * Set it if you want the names and the types of output columns to be sent to the client.
     * </pre>
     *
     * <code>bool send_output_columns = 24;</code>
     */
    public boolean getSendOutputColumns() {
      return sendOutputColumns_;
    }

    public static final int EXTERNAL_TABLES_FIELD_NUMBER = 8;
    private java.util.List<ClickhouseGrpc.ExternalTable> externalTables_;
    /**
     * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
     */
    public java.util.List<ClickhouseGrpc.ExternalTable> getExternalTablesList() {
      return externalTables_;
    }
    /**
     * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
     */
    public java.util.List<? extends ClickhouseGrpc.ExternalTableOrBuilder>
        getExternalTablesOrBuilderList() {
      return externalTables_;
    }
    /**
     * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
     */
    public int getExternalTablesCount() {
      return externalTables_.size();
    }
    /**
     * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
     */
    public ClickhouseGrpc.ExternalTable getExternalTables(int index) {
      return externalTables_.get(index);
    }
    /**
     * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
     */
    public ClickhouseGrpc.ExternalTableOrBuilder getExternalTablesOrBuilder(
        int index) {
      return externalTables_.get(index);
    }

    public static final int USER_NAME_FIELD_NUMBER = 9;
    private volatile java.lang.Object userName_;
    /**
     * <code>string user_name = 9;</code>
     */
    public java.lang.String getUserName() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        userName_ = s;
        return s;
      }
    }
    /**
     * <code>string user_name = 9;</code>
     */
    public com.google.protobuf.ByteString
        getUserNameBytes() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        userName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PASSWORD_FIELD_NUMBER = 10;
    private volatile java.lang.Object password_;
    /**
     * <code>string password = 10;</code>
     */
    public java.lang.String getPassword() {
      java.lang.Object ref = password_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        password_ = s;
        return s;
      }
    }
    /**
     * <code>string password = 10;</code>
     */
    public com.google.protobuf.ByteString
        getPasswordBytes() {
      java.lang.Object ref = password_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        password_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int QUOTA_FIELD_NUMBER = 11;
    private volatile java.lang.Object quota_;
    /**
     * <code>string quota = 11;</code>
     */
    public java.lang.String getQuota() {
      java.lang.Object ref = quota_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        quota_ = s;
        return s;
      }
    }
    /**
     * <code>string quota = 11;</code>
     */
    public com.google.protobuf.ByteString
        getQuotaBytes() {
      java.lang.Object ref = quota_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        quota_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SESSION_ID_FIELD_NUMBER = 12;
    private volatile java.lang.Object sessionId_;
    /**
     * <pre>
     * Works exactly like sessions in the HTTP protocol.
     * </pre>
     *
     * <code>string session_id = 12;</code>
     */
    public java.lang.String getSessionId() {
      java.lang.Object ref = sessionId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sessionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Works exactly like sessions in the HTTP protocol.
     * </pre>
     *
     * <code>string session_id = 12;</code>
     */
    public com.google.protobuf.ByteString
        getSessionIdBytes() {
      java.lang.Object ref = sessionId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sessionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SESSION_CHECK_FIELD_NUMBER = 13;
    private boolean sessionCheck_;
    /**
     * <code>bool session_check = 13;</code>
     */
    public boolean getSessionCheck() {
      return sessionCheck_;
    }

    public static final int SESSION_TIMEOUT_FIELD_NUMBER = 14;
    private int sessionTimeout_;
    /**
     * <code>uint32 session_timeout = 14;</code>
     */
    public int getSessionTimeout() {
      return sessionTimeout_;
    }

    public static final int CANCEL_FIELD_NUMBER = 15;
    private boolean cancel_;
    /**
     * <pre>
     * Set `cancel` to true to stop executing the query.
     * </pre>
     *
     * <code>bool cancel = 15;</code>
     */
    public boolean getCancel() {
      return cancel_;
    }

    public static final int NEXT_QUERY_INFO_FIELD_NUMBER = 16;
    private boolean nextQueryInfo_;
    /**
     * <pre>
     * If true there will be at least one more QueryInfo in the input stream.
     * `next_query_info` is allowed to be set only if a method with streaming input (i.e. ExecuteQueryWithStreamInput() or ExecuteQueryWithStreamIO()) is used.
     * </pre>
     *
     * <code>bool next_query_info = 16;</code>
     */
    public boolean getNextQueryInfo() {
      return nextQueryInfo_;
    }

    public static final int INPUT_COMPRESSION_TYPE_FIELD_NUMBER = 20;
    private volatile java.lang.Object inputCompressionType_;
    /**
     * <pre>
     * Compression type for `input_data`.
     * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
     * The client is responsible to compress data before putting it into `input_data`.
     * </pre>
     *
     * <code>string input_compression_type = 20;</code>
     */
    public java.lang.String getInputCompressionType() {
      java.lang.Object ref = inputCompressionType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        inputCompressionType_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Compression type for `input_data`.
     * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
     * The client is responsible to compress data before putting it into `input_data`.
     * </pre>
     *
     * <code>string input_compression_type = 20;</code>
     */
    public com.google.protobuf.ByteString
        getInputCompressionTypeBytes() {
      java.lang.Object ref = inputCompressionType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        inputCompressionType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OUTPUT_COMPRESSION_TYPE_FIELD_NUMBER = 21;
    private volatile java.lang.Object outputCompressionType_;
    /**
     * <pre>
     * Compression type for `output_data`, `totals` and `extremes`.
     * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
     * The client receives compressed data and should decompress it by itself.
     * Consider also setting `output_compression_level`.
     * </pre>
     *
     * <code>string output_compression_type = 21;</code>
     */
    public java.lang.String getOutputCompressionType() {
      java.lang.Object ref = outputCompressionType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        outputCompressionType_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Compression type for `output_data`, `totals` and `extremes`.
     * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
     * The client receives compressed data and should decompress it by itself.
     * Consider also setting `output_compression_level`.
     * </pre>
     *
     * <code>string output_compression_type = 21;</code>
     */
    public com.google.protobuf.ByteString
        getOutputCompressionTypeBytes() {
      java.lang.Object ref = outputCompressionType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        outputCompressionType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OUTPUT_COMPRESSION_LEVEL_FIELD_NUMBER = 19;
    private int outputCompressionLevel_;
    /**
     * <pre>
     * Compression level.
     * WARNING: If it's not specified the compression level is set to zero by default which might be not the best choice for some compression types (see below).
     * The compression level should be in the following range (the higher the number, the better the compression):
     * none: compression level isn't used
     * gzip: 0..9; 0 means no compression, 6 is recommended by default (compression level -1 also means 6)
     * brotli: 0..11
     * lzma: 0..9; 6 is recommended by default
     * zstd: 1..22; 3 is recommended by default (compression level 0 also means 3)
     * lz4: 0..16; values &lt; 0 mean fast acceleration
     * bz2: 1..9
     * </pre>
     *
     * <code>int32 output_compression_level = 19;</code>
     */
    public int getOutputCompressionLevel() {
      return outputCompressionLevel_;
    }

    public static final int TRANSPORT_COMPRESSION_TYPE_FIELD_NUMBER = 22;
    private volatile java.lang.Object transportCompressionType_;
    /**
     * <pre>
     * Transport compression is an alternative way to make the server to compress its response.
     * This kind of compression implies that instead of compressing just `output` the server will compress whole packed messages of the `Result` type,
     * and then gRPC implementation on client side will decompress those messages so client code won't be bothered with decompression.
     * Here is a big difference between the transport compression and the compression enabled by setting `output_compression_type` because
     * in case of the transport compression the client code receives already decompressed data in `output`.
     * If the transport compression is not set here it can still be enabled by the server configuration.
     * Supported compression types: none, deflate, gzip, stream_gzip
     * Supported compression levels: 0..3
     * WARNING: Don't set `transport_compression` and `output_compression` at the same time because it will make the server to compress its output twice!
     * </pre>
     *
     * <code>string transport_compression_type = 22;</code>
     */
    public java.lang.String getTransportCompressionType() {
      java.lang.Object ref = transportCompressionType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        transportCompressionType_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Transport compression is an alternative way to make the server to compress its response.
     * This kind of compression implies that instead of compressing just `output` the server will compress whole packed messages of the `Result` type,
     * and then gRPC implementation on client side will decompress those messages so client code won't be bothered with decompression.
     * Here is a big difference between the transport compression and the compression enabled by setting `output_compression_type` because
     * in case of the transport compression the client code receives already decompressed data in `output`.
     * If the transport compression is not set here it can still be enabled by the server configuration.
     * Supported compression types: none, deflate, gzip, stream_gzip
     * Supported compression levels: 0..3
     * WARNING: Don't set `transport_compression` and `output_compression` at the same time because it will make the server to compress its output twice!
     * </pre>
     *
     * <code>string transport_compression_type = 22;</code>
     */
    public com.google.protobuf.ByteString
        getTransportCompressionTypeBytes() {
      java.lang.Object ref = transportCompressionType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        transportCompressionType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TRANSPORT_COMPRESSION_LEVEL_FIELD_NUMBER = 23;
    private int transportCompressionLevel_;
    /**
     * <code>int32 transport_compression_level = 23;</code>
     */
    public int getTransportCompressionLevel() {
      return transportCompressionLevel_;
    }

    public static final int OBSOLETE_RESULT_COMPRESSION_FIELD_NUMBER = 17;
    private ClickhouseGrpc.ObsoleteTransportCompression obsoleteResultCompression_;
    /**
     * <pre>
     *&#47; Obsolete fields, should not be used in new code.
     * </pre>
     *
     * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
     */
    public boolean hasObsoleteResultCompression() {
      return obsoleteResultCompression_ != null;
    }
    /**
     * <pre>
     *&#47; Obsolete fields, should not be used in new code.
     * </pre>
     *
     * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
     */
    public ClickhouseGrpc.ObsoleteTransportCompression getObsoleteResultCompression() {
      return obsoleteResultCompression_ == null ? ClickhouseGrpc.ObsoleteTransportCompression.getDefaultInstance() : obsoleteResultCompression_;
    }
    /**
     * <pre>
     *&#47; Obsolete fields, should not be used in new code.
     * </pre>
     *
     * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
     */
    public ClickhouseGrpc.ObsoleteTransportCompressionOrBuilder getObsoleteResultCompressionOrBuilder() {
      return getObsoleteResultCompression();
    }

    public static final int OBSOLETE_COMPRESSION_TYPE_FIELD_NUMBER = 18;
    private volatile java.lang.Object obsoleteCompressionType_;
    /**
     * <code>string obsolete_compression_type = 18;</code>
     */
    public java.lang.String getObsoleteCompressionType() {
      java.lang.Object ref = obsoleteCompressionType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        obsoleteCompressionType_ = s;
        return s;
      }
    }
    /**
     * <code>string obsolete_compression_type = 18;</code>
     */
    public com.google.protobuf.ByteString
        getObsoleteCompressionTypeBytes() {
      java.lang.Object ref = obsoleteCompressionType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        obsoleteCompressionType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getQueryBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, query_);
      }
      if (!getQueryIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, queryId_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetSettings(),
          SettingsDefaultEntryHolder.defaultEntry,
          3);
      if (!getDatabaseBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, database_);
      }
      if (!inputData_.isEmpty()) {
        output.writeBytes(5, inputData_);
      }
      if (!inputDataDelimiter_.isEmpty()) {
        output.writeBytes(6, inputDataDelimiter_);
      }
      if (!getOutputFormatBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, outputFormat_);
      }
      for (int i = 0; i < externalTables_.size(); i++) {
        output.writeMessage(8, externalTables_.get(i));
      }
      if (!getUserNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 9, userName_);
      }
      if (!getPasswordBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 10, password_);
      }
      if (!getQuotaBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 11, quota_);
      }
      if (!getSessionIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 12, sessionId_);
      }
      if (sessionCheck_ != false) {
        output.writeBool(13, sessionCheck_);
      }
      if (sessionTimeout_ != 0) {
        output.writeUInt32(14, sessionTimeout_);
      }
      if (cancel_ != false) {
        output.writeBool(15, cancel_);
      }
      if (nextQueryInfo_ != false) {
        output.writeBool(16, nextQueryInfo_);
      }
      if (obsoleteResultCompression_ != null) {
        output.writeMessage(17, getObsoleteResultCompression());
      }
      if (!getObsoleteCompressionTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 18, obsoleteCompressionType_);
      }
      if (outputCompressionLevel_ != 0) {
        output.writeInt32(19, outputCompressionLevel_);
      }
      if (!getInputCompressionTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 20, inputCompressionType_);
      }
      if (!getOutputCompressionTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 21, outputCompressionType_);
      }
      if (!getTransportCompressionTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 22, transportCompressionType_);
      }
      if (transportCompressionLevel_ != 0) {
        output.writeInt32(23, transportCompressionLevel_);
      }
      if (sendOutputColumns_ != false) {
        output.writeBool(24, sendOutputColumns_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getQueryBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, query_);
      }
      if (!getQueryIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, queryId_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetSettings().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        settings__ = SettingsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, settings__);
      }
      if (!getDatabaseBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, database_);
      }
      if (!inputData_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, inputData_);
      }
      if (!inputDataDelimiter_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, inputDataDelimiter_);
      }
      if (!getOutputFormatBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, outputFormat_);
      }
      for (int i = 0; i < externalTables_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, externalTables_.get(i));
      }
      if (!getUserNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, userName_);
      }
      if (!getPasswordBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, password_);
      }
      if (!getQuotaBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(11, quota_);
      }
      if (!getSessionIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, sessionId_);
      }
      if (sessionCheck_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, sessionCheck_);
      }
      if (sessionTimeout_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, sessionTimeout_);
      }
      if (cancel_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(15, cancel_);
      }
      if (nextQueryInfo_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, nextQueryInfo_);
      }
      if (obsoleteResultCompression_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getObsoleteResultCompression());
      }
      if (!getObsoleteCompressionTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(18, obsoleteCompressionType_);
      }
      if (outputCompressionLevel_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, outputCompressionLevel_);
      }
      if (!getInputCompressionTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(20, inputCompressionType_);
      }
      if (!getOutputCompressionTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(21, outputCompressionType_);
      }
      if (!getTransportCompressionTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(22, transportCompressionType_);
      }
      if (transportCompressionLevel_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(23, transportCompressionLevel_);
      }
      if (sendOutputColumns_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(24, sendOutputColumns_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ClickhouseGrpc.QueryInfo)) {
        return super.equals(obj);
      }
      ClickhouseGrpc.QueryInfo other = (ClickhouseGrpc.QueryInfo) obj;

      boolean result = true;
      result = result && getQuery()
          .equals(other.getQuery());
      result = result && getQueryId()
          .equals(other.getQueryId());
      result = result && internalGetSettings().equals(
          other.internalGetSettings());
      result = result && getDatabase()
          .equals(other.getDatabase());
      result = result && getInputData()
          .equals(other.getInputData());
      result = result && getInputDataDelimiter()
          .equals(other.getInputDataDelimiter());
      result = result && getOutputFormat()
          .equals(other.getOutputFormat());
      result = result && (getSendOutputColumns()
          == other.getSendOutputColumns());
      result = result && getExternalTablesList()
          .equals(other.getExternalTablesList());
      result = result && getUserName()
          .equals(other.getUserName());
      result = result && getPassword()
          .equals(other.getPassword());
      result = result && getQuota()
          .equals(other.getQuota());
      result = result && getSessionId()
          .equals(other.getSessionId());
      result = result && (getSessionCheck()
          == other.getSessionCheck());
      result = result && (getSessionTimeout()
          == other.getSessionTimeout());
      result = result && (getCancel()
          == other.getCancel());
      result = result && (getNextQueryInfo()
          == other.getNextQueryInfo());
      result = result && getInputCompressionType()
          .equals(other.getInputCompressionType());
      result = result && getOutputCompressionType()
          .equals(other.getOutputCompressionType());
      result = result && (getOutputCompressionLevel()
          == other.getOutputCompressionLevel());
      result = result && getTransportCompressionType()
          .equals(other.getTransportCompressionType());
      result = result && (getTransportCompressionLevel()
          == other.getTransportCompressionLevel());
      result = result && (hasObsoleteResultCompression() == other.hasObsoleteResultCompression());
      if (hasObsoleteResultCompression()) {
        result = result && getObsoleteResultCompression()
            .equals(other.getObsoleteResultCompression());
      }
      result = result && getObsoleteCompressionType()
          .equals(other.getObsoleteCompressionType());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + QUERY_FIELD_NUMBER;
      hash = (53 * hash) + getQuery().hashCode();
      hash = (37 * hash) + QUERY_ID_FIELD_NUMBER;
      hash = (53 * hash) + getQueryId().hashCode();
      if (!internalGetSettings().getMap().isEmpty()) {
        hash = (37 * hash) + SETTINGS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetSettings().hashCode();
      }
      hash = (37 * hash) + DATABASE_FIELD_NUMBER;
      hash = (53 * hash) + getDatabase().hashCode();
      hash = (37 * hash) + INPUT_DATA_FIELD_NUMBER;
      hash = (53 * hash) + getInputData().hashCode();
      hash = (37 * hash) + INPUT_DATA_DELIMITER_FIELD_NUMBER;
      hash = (53 * hash) + getInputDataDelimiter().hashCode();
      hash = (37 * hash) + OUTPUT_FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + getOutputFormat().hashCode();
      hash = (37 * hash) + SEND_OUTPUT_COLUMNS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getSendOutputColumns());
      if (getExternalTablesCount() > 0) {
        hash = (37 * hash) + EXTERNAL_TABLES_FIELD_NUMBER;
        hash = (53 * hash) + getExternalTablesList().hashCode();
      }
      hash = (37 * hash) + USER_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getUserName().hashCode();
      hash = (37 * hash) + PASSWORD_FIELD_NUMBER;
      hash = (53 * hash) + getPassword().hashCode();
      hash = (37 * hash) + QUOTA_FIELD_NUMBER;
      hash = (53 * hash) + getQuota().hashCode();
      hash = (37 * hash) + SESSION_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSessionId().hashCode();
      hash = (37 * hash) + SESSION_CHECK_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getSessionCheck());
      hash = (37 * hash) + SESSION_TIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + getSessionTimeout();
      hash = (37 * hash) + CANCEL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getCancel());
      hash = (37 * hash) + NEXT_QUERY_INFO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getNextQueryInfo());
      hash = (37 * hash) + INPUT_COMPRESSION_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getInputCompressionType().hashCode();
      hash = (37 * hash) + OUTPUT_COMPRESSION_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getOutputCompressionType().hashCode();
      hash = (37 * hash) + OUTPUT_COMPRESSION_LEVEL_FIELD_NUMBER;
      hash = (53 * hash) + getOutputCompressionLevel();
      hash = (37 * hash) + TRANSPORT_COMPRESSION_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getTransportCompressionType().hashCode();
      hash = (37 * hash) + TRANSPORT_COMPRESSION_LEVEL_FIELD_NUMBER;
      hash = (53 * hash) + getTransportCompressionLevel();
      if (hasObsoleteResultCompression()) {
        hash = (37 * hash) + OBSOLETE_RESULT_COMPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getObsoleteResultCompression().hashCode();
      }
      hash = (37 * hash) + OBSOLETE_COMPRESSION_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getObsoleteCompressionType().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ClickhouseGrpc.QueryInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.QueryInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.QueryInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.QueryInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.QueryInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.QueryInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.QueryInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.QueryInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.QueryInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.QueryInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.QueryInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.QueryInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ClickhouseGrpc.QueryInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Information about a query which a client sends to a ClickHouse server.
     * The first QueryInfo can set any of the following fields. Extra QueryInfos only add extra data.
     * In extra QueryInfos only `input_data`, `external_tables`, `next_query_info` and `cancel` fields can be set.
     * </pre>
     *
     * Protobuf type {@code clickhouse.grpc.QueryInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clickhouse.grpc.QueryInfo)
        ClickhouseGrpc.QueryInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_QueryInfo_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetSettings();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetMutableSettings();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_QueryInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ClickhouseGrpc.QueryInfo.class, ClickhouseGrpc.QueryInfo.Builder.class);
      }

      // Construct using clickhouse.grpc.ClickhouseGrpc.QueryInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getExternalTablesFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        query_ = "";

        queryId_ = "";

        internalGetMutableSettings().clear();
        database_ = "";

        inputData_ = com.google.protobuf.ByteString.EMPTY;

        inputDataDelimiter_ = com.google.protobuf.ByteString.EMPTY;

        outputFormat_ = "";

        sendOutputColumns_ = false;

        if (externalTablesBuilder_ == null) {
          externalTables_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          externalTablesBuilder_.clear();
        }
        userName_ = "";

        password_ = "";

        quota_ = "";

        sessionId_ = "";

        sessionCheck_ = false;

        sessionTimeout_ = 0;

        cancel_ = false;

        nextQueryInfo_ = false;

        inputCompressionType_ = "";

        outputCompressionType_ = "";

        outputCompressionLevel_ = 0;

        transportCompressionType_ = "";

        transportCompressionLevel_ = 0;

        if (obsoleteResultCompressionBuilder_ == null) {
          obsoleteResultCompression_ = null;
        } else {
          obsoleteResultCompression_ = null;
          obsoleteResultCompressionBuilder_ = null;
        }
        obsoleteCompressionType_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_QueryInfo_descriptor;
      }

      public ClickhouseGrpc.QueryInfo getDefaultInstanceForType() {
        return ClickhouseGrpc.QueryInfo.getDefaultInstance();
      }

      public ClickhouseGrpc.QueryInfo build() {
        ClickhouseGrpc.QueryInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ClickhouseGrpc.QueryInfo buildPartial() {
        ClickhouseGrpc.QueryInfo result = new ClickhouseGrpc.QueryInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.query_ = query_;
        result.queryId_ = queryId_;
        result.settings_ = internalGetSettings();
        result.settings_.makeImmutable();
        result.database_ = database_;
        result.inputData_ = inputData_;
        result.inputDataDelimiter_ = inputDataDelimiter_;
        result.outputFormat_ = outputFormat_;
        result.sendOutputColumns_ = sendOutputColumns_;
        if (externalTablesBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            externalTables_ = java.util.Collections.unmodifiableList(externalTables_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.externalTables_ = externalTables_;
        } else {
          result.externalTables_ = externalTablesBuilder_.build();
        }
        result.userName_ = userName_;
        result.password_ = password_;
        result.quota_ = quota_;
        result.sessionId_ = sessionId_;
        result.sessionCheck_ = sessionCheck_;
        result.sessionTimeout_ = sessionTimeout_;
        result.cancel_ = cancel_;
        result.nextQueryInfo_ = nextQueryInfo_;
        result.inputCompressionType_ = inputCompressionType_;
        result.outputCompressionType_ = outputCompressionType_;
        result.outputCompressionLevel_ = outputCompressionLevel_;
        result.transportCompressionType_ = transportCompressionType_;
        result.transportCompressionLevel_ = transportCompressionLevel_;
        if (obsoleteResultCompressionBuilder_ == null) {
          result.obsoleteResultCompression_ = obsoleteResultCompression_;
        } else {
          result.obsoleteResultCompression_ = obsoleteResultCompressionBuilder_.build();
        }
        result.obsoleteCompressionType_ = obsoleteCompressionType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ClickhouseGrpc.QueryInfo) {
          return mergeFrom((ClickhouseGrpc.QueryInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ClickhouseGrpc.QueryInfo other) {
        if (other == ClickhouseGrpc.QueryInfo.getDefaultInstance()) return this;
        if (!other.getQuery().isEmpty()) {
          query_ = other.query_;
          onChanged();
        }
        if (!other.getQueryId().isEmpty()) {
          queryId_ = other.queryId_;
          onChanged();
        }
        internalGetMutableSettings().mergeFrom(
            other.internalGetSettings());
        if (!other.getDatabase().isEmpty()) {
          database_ = other.database_;
          onChanged();
        }
        if (other.getInputData() != com.google.protobuf.ByteString.EMPTY) {
          setInputData(other.getInputData());
        }
        if (other.getInputDataDelimiter() != com.google.protobuf.ByteString.EMPTY) {
          setInputDataDelimiter(other.getInputDataDelimiter());
        }
        if (!other.getOutputFormat().isEmpty()) {
          outputFormat_ = other.outputFormat_;
          onChanged();
        }
        if (other.getSendOutputColumns() != false) {
          setSendOutputColumns(other.getSendOutputColumns());
        }
        if (externalTablesBuilder_ == null) {
          if (!other.externalTables_.isEmpty()) {
            if (externalTables_.isEmpty()) {
              externalTables_ = other.externalTables_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureExternalTablesIsMutable();
              externalTables_.addAll(other.externalTables_);
            }
            onChanged();
          }
        } else {
          if (!other.externalTables_.isEmpty()) {
            if (externalTablesBuilder_.isEmpty()) {
              externalTablesBuilder_.dispose();
              externalTablesBuilder_ = null;
              externalTables_ = other.externalTables_;
              bitField0_ = (bitField0_ & ~0x00000100);
              externalTablesBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getExternalTablesFieldBuilder() : null;
            } else {
              externalTablesBuilder_.addAllMessages(other.externalTables_);
            }
          }
        }
        if (!other.getUserName().isEmpty()) {
          userName_ = other.userName_;
          onChanged();
        }
        if (!other.getPassword().isEmpty()) {
          password_ = other.password_;
          onChanged();
        }
        if (!other.getQuota().isEmpty()) {
          quota_ = other.quota_;
          onChanged();
        }
        if (!other.getSessionId().isEmpty()) {
          sessionId_ = other.sessionId_;
          onChanged();
        }
        if (other.getSessionCheck() != false) {
          setSessionCheck(other.getSessionCheck());
        }
        if (other.getSessionTimeout() != 0) {
          setSessionTimeout(other.getSessionTimeout());
        }
        if (other.getCancel() != false) {
          setCancel(other.getCancel());
        }
        if (other.getNextQueryInfo() != false) {
          setNextQueryInfo(other.getNextQueryInfo());
        }
        if (!other.getInputCompressionType().isEmpty()) {
          inputCompressionType_ = other.inputCompressionType_;
          onChanged();
        }
        if (!other.getOutputCompressionType().isEmpty()) {
          outputCompressionType_ = other.outputCompressionType_;
          onChanged();
        }
        if (other.getOutputCompressionLevel() != 0) {
          setOutputCompressionLevel(other.getOutputCompressionLevel());
        }
        if (!other.getTransportCompressionType().isEmpty()) {
          transportCompressionType_ = other.transportCompressionType_;
          onChanged();
        }
        if (other.getTransportCompressionLevel() != 0) {
          setTransportCompressionLevel(other.getTransportCompressionLevel());
        }
        if (other.hasObsoleteResultCompression()) {
          mergeObsoleteResultCompression(other.getObsoleteResultCompression());
        }
        if (!other.getObsoleteCompressionType().isEmpty()) {
          obsoleteCompressionType_ = other.obsoleteCompressionType_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ClickhouseGrpc.QueryInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ClickhouseGrpc.QueryInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object query_ = "";
      /**
       * <code>string query = 1;</code>
       */
      public java.lang.String getQuery() {
        java.lang.Object ref = query_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          query_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string query = 1;</code>
       */
      public com.google.protobuf.ByteString
          getQueryBytes() {
        java.lang.Object ref = query_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          query_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string query = 1;</code>
       */
      public Builder setQuery(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        query_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string query = 1;</code>
       */
      public Builder clearQuery() {

        query_ = getDefaultInstance().getQuery();
        onChanged();
        return this;
      }
      /**
       * <code>string query = 1;</code>
       */
      public Builder setQueryBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        query_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object queryId_ = "";
      /**
       * <code>string query_id = 2;</code>
       */
      public java.lang.String getQueryId() {
        java.lang.Object ref = queryId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          queryId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string query_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getQueryIdBytes() {
        java.lang.Object ref = queryId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          queryId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string query_id = 2;</code>
       */
      public Builder setQueryId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        queryId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string query_id = 2;</code>
       */
      public Builder clearQueryId() {

        queryId_ = getDefaultInstance().getQueryId();
        onChanged();
        return this;
      }
      /**
       * <code>string query_id = 2;</code>
       */
      public Builder setQueryIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        queryId_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> settings_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetSettings() {
        if (settings_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              SettingsDefaultEntryHolder.defaultEntry);
        }
        return settings_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableSettings() {
        onChanged();;
        if (settings_ == null) {
          settings_ = com.google.protobuf.MapField.newMapField(
              SettingsDefaultEntryHolder.defaultEntry);
        }
        if (!settings_.isMutable()) {
          settings_ = settings_.copy();
        }
        return settings_;
      }

      public int getSettingsCount() {
        return internalGetSettings().getMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; settings = 3;</code>
       */

      public boolean containsSettings(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetSettings().getMap().containsKey(key);
      }
      /**
       * Use {@link #getSettingsMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getSettings() {
        return getSettingsMap();
      }
      /**
       * <code>map&lt;string, string&gt; settings = 3;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getSettingsMap() {
        return internalGetSettings().getMap();
      }
      /**
       * <code>map&lt;string, string&gt; settings = 3;</code>
       */

      public java.lang.String getSettingsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetSettings().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; settings = 3;</code>
       */

      public java.lang.String getSettingsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetSettings().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearSettings() {
        internalGetMutableSettings().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; settings = 3;</code>
       */

      public Builder removeSettings(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableSettings().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableSettings() {
        return internalGetMutableSettings().getMutableMap();
      }
      /**
       * <code>map&lt;string, string&gt; settings = 3;</code>
       */
      public Builder putSettings(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableSettings().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; settings = 3;</code>
       */

      public Builder putAllSettings(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableSettings().getMutableMap()
            .putAll(values);
        return this;
      }

      private java.lang.Object database_ = "";
      /**
       * <pre>
       * Default database.
       * </pre>
       *
       * <code>string database = 4;</code>
       */
      public java.lang.String getDatabase() {
        java.lang.Object ref = database_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          database_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Default database.
       * </pre>
       *
       * <code>string database = 4;</code>
       */
      public com.google.protobuf.ByteString
          getDatabaseBytes() {
        java.lang.Object ref = database_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          database_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Default database.
       * </pre>
       *
       * <code>string database = 4;</code>
       */
      public Builder setDatabase(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        database_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Default database.
       * </pre>
       *
       * <code>string database = 4;</code>
       */
      public Builder clearDatabase() {

        database_ = getDefaultInstance().getDatabase();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Default database.
       * </pre>
       *
       * <code>string database = 4;</code>
       */
      public Builder setDatabaseBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        database_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString inputData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Input data, used both as data for INSERT query and as data for the input() function.
       * </pre>
       *
       * <code>bytes input_data = 5;</code>
       */
      public com.google.protobuf.ByteString getInputData() {
        return inputData_;
      }
      /**
       * <pre>
       * Input data, used both as data for INSERT query and as data for the input() function.
       * </pre>
       *
       * <code>bytes input_data = 5;</code>
       */
      public Builder setInputData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }

        inputData_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Input data, used both as data for INSERT query and as data for the input() function.
       * </pre>
       *
       * <code>bytes input_data = 5;</code>
       */
      public Builder clearInputData() {

        inputData_ = getDefaultInstance().getInputData();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString inputDataDelimiter_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Delimiter for input_data, inserted between input_data from adjacent QueryInfos.
       * </pre>
       *
       * <code>bytes input_data_delimiter = 6;</code>
       */
      public com.google.protobuf.ByteString getInputDataDelimiter() {
        return inputDataDelimiter_;
      }
      /**
       * <pre>
       * Delimiter for input_data, inserted between input_data from adjacent QueryInfos.
       * </pre>
       *
       * <code>bytes input_data_delimiter = 6;</code>
       */
      public Builder setInputDataDelimiter(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }

        inputDataDelimiter_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Delimiter for input_data, inserted between input_data from adjacent QueryInfos.
       * </pre>
       *
       * <code>bytes input_data_delimiter = 6;</code>
       */
      public Builder clearInputDataDelimiter() {

        inputDataDelimiter_ = getDefaultInstance().getInputDataDelimiter();
        onChanged();
        return this;
      }

      private java.lang.Object outputFormat_ = "";
      /**
       * <pre>
       * Default output format. If not specified, 'TabSeparated' is used.
       * </pre>
       *
       * <code>string output_format = 7;</code>
       */
      public java.lang.String getOutputFormat() {
        java.lang.Object ref = outputFormat_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          outputFormat_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Default output format. If not specified, 'TabSeparated' is used.
       * </pre>
       *
       * <code>string output_format = 7;</code>
       */
      public com.google.protobuf.ByteString
          getOutputFormatBytes() {
        java.lang.Object ref = outputFormat_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          outputFormat_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Default output format. If not specified, 'TabSeparated' is used.
       * </pre>
       *
       * <code>string output_format = 7;</code>
       */
      public Builder setOutputFormat(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        outputFormat_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Default output format. If not specified, 'TabSeparated' is used.
       * </pre>
       *
       * <code>string output_format = 7;</code>
       */
      public Builder clearOutputFormat() {

        outputFormat_ = getDefaultInstance().getOutputFormat();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Default output format. If not specified, 'TabSeparated' is used.
       * </pre>
       *
       * <code>string output_format = 7;</code>
       */
      public Builder setOutputFormatBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        outputFormat_ = value;
        onChanged();
        return this;
      }

      private boolean sendOutputColumns_ ;
      /**
       * <pre>
       * Set it if you want the names and the types of output columns to be sent to the client.
       * </pre>
       *
       * <code>bool send_output_columns = 24;</code>
       */
      public boolean getSendOutputColumns() {
        return sendOutputColumns_;
      }
      /**
       * <pre>
       * Set it if you want the names and the types of output columns to be sent to the client.
       * </pre>
       *
       * <code>bool send_output_columns = 24;</code>
       */
      public Builder setSendOutputColumns(boolean value) {

        sendOutputColumns_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set it if you want the names and the types of output columns to be sent to the client.
       * </pre>
       *
       * <code>bool send_output_columns = 24;</code>
       */
      public Builder clearSendOutputColumns() {

        sendOutputColumns_ = false;
        onChanged();
        return this;
      }

      private java.util.List<ClickhouseGrpc.ExternalTable> externalTables_ =
        java.util.Collections.emptyList();
      private void ensureExternalTablesIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          externalTables_ = new java.util.ArrayList<ClickhouseGrpc.ExternalTable>(externalTables_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          ClickhouseGrpc.ExternalTable, ClickhouseGrpc.ExternalTable.Builder, ClickhouseGrpc.ExternalTableOrBuilder> externalTablesBuilder_;

      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public java.util.List<ClickhouseGrpc.ExternalTable> getExternalTablesList() {
        if (externalTablesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(externalTables_);
        } else {
          return externalTablesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public int getExternalTablesCount() {
        if (externalTablesBuilder_ == null) {
          return externalTables_.size();
        } else {
          return externalTablesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public ClickhouseGrpc.ExternalTable getExternalTables(int index) {
        if (externalTablesBuilder_ == null) {
          return externalTables_.get(index);
        } else {
          return externalTablesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public Builder setExternalTables(
          int index, ClickhouseGrpc.ExternalTable value) {
        if (externalTablesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExternalTablesIsMutable();
          externalTables_.set(index, value);
          onChanged();
        } else {
          externalTablesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public Builder setExternalTables(
          int index, ClickhouseGrpc.ExternalTable.Builder builderForValue) {
        if (externalTablesBuilder_ == null) {
          ensureExternalTablesIsMutable();
          externalTables_.set(index, builderForValue.build());
          onChanged();
        } else {
          externalTablesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public Builder addExternalTables(ClickhouseGrpc.ExternalTable value) {
        if (externalTablesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExternalTablesIsMutable();
          externalTables_.add(value);
          onChanged();
        } else {
          externalTablesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public Builder addExternalTables(
          int index, ClickhouseGrpc.ExternalTable value) {
        if (externalTablesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExternalTablesIsMutable();
          externalTables_.add(index, value);
          onChanged();
        } else {
          externalTablesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public Builder addExternalTables(
          ClickhouseGrpc.ExternalTable.Builder builderForValue) {
        if (externalTablesBuilder_ == null) {
          ensureExternalTablesIsMutable();
          externalTables_.add(builderForValue.build());
          onChanged();
        } else {
          externalTablesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public Builder addExternalTables(
          int index, ClickhouseGrpc.ExternalTable.Builder builderForValue) {
        if (externalTablesBuilder_ == null) {
          ensureExternalTablesIsMutable();
          externalTables_.add(index, builderForValue.build());
          onChanged();
        } else {
          externalTablesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public Builder addAllExternalTables(
          java.lang.Iterable<? extends ClickhouseGrpc.ExternalTable> values) {
        if (externalTablesBuilder_ == null) {
          ensureExternalTablesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, externalTables_);
          onChanged();
        } else {
          externalTablesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public Builder clearExternalTables() {
        if (externalTablesBuilder_ == null) {
          externalTables_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          externalTablesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public Builder removeExternalTables(int index) {
        if (externalTablesBuilder_ == null) {
          ensureExternalTablesIsMutable();
          externalTables_.remove(index);
          onChanged();
        } else {
          externalTablesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public ClickhouseGrpc.ExternalTable.Builder getExternalTablesBuilder(
          int index) {
        return getExternalTablesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public ClickhouseGrpc.ExternalTableOrBuilder getExternalTablesOrBuilder(
          int index) {
        if (externalTablesBuilder_ == null) {
          return externalTables_.get(index);  } else {
          return externalTablesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public java.util.List<? extends ClickhouseGrpc.ExternalTableOrBuilder>
           getExternalTablesOrBuilderList() {
        if (externalTablesBuilder_ != null) {
          return externalTablesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(externalTables_);
        }
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public ClickhouseGrpc.ExternalTable.Builder addExternalTablesBuilder() {
        return getExternalTablesFieldBuilder().addBuilder(
            ClickhouseGrpc.ExternalTable.getDefaultInstance());
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public ClickhouseGrpc.ExternalTable.Builder addExternalTablesBuilder(
          int index) {
        return getExternalTablesFieldBuilder().addBuilder(
            index, ClickhouseGrpc.ExternalTable.getDefaultInstance());
      }
      /**
       * <code>repeated .clickhouse.grpc.ExternalTable external_tables = 8;</code>
       */
      public java.util.List<ClickhouseGrpc.ExternalTable.Builder>
           getExternalTablesBuilderList() {
        return getExternalTablesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          ClickhouseGrpc.ExternalTable, ClickhouseGrpc.ExternalTable.Builder, ClickhouseGrpc.ExternalTableOrBuilder>
          getExternalTablesFieldBuilder() {
        if (externalTablesBuilder_ == null) {
          externalTablesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              ClickhouseGrpc.ExternalTable, ClickhouseGrpc.ExternalTable.Builder, ClickhouseGrpc.ExternalTableOrBuilder>(
                  externalTables_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          externalTables_ = null;
        }
        return externalTablesBuilder_;
      }

      private java.lang.Object userName_ = "";
      /**
       * <code>string user_name = 9;</code>
       */
      public java.lang.String getUserName() {
        java.lang.Object ref = userName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          userName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string user_name = 9;</code>
       */
      public com.google.protobuf.ByteString
          getUserNameBytes() {
        java.lang.Object ref = userName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string user_name = 9;</code>
       */
      public Builder setUserName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        userName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string user_name = 9;</code>
       */
      public Builder clearUserName() {

        userName_ = getDefaultInstance().getUserName();
        onChanged();
        return this;
      }
      /**
       * <code>string user_name = 9;</code>
       */
      public Builder setUserNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        userName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object password_ = "";
      /**
       * <code>string password = 10;</code>
       */
      public java.lang.String getPassword() {
        java.lang.Object ref = password_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          password_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string password = 10;</code>
       */
      public com.google.protobuf.ByteString
          getPasswordBytes() {
        java.lang.Object ref = password_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          password_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string password = 10;</code>
       */
      public Builder setPassword(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        password_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string password = 10;</code>
       */
      public Builder clearPassword() {

        password_ = getDefaultInstance().getPassword();
        onChanged();
        return this;
      }
      /**
       * <code>string password = 10;</code>
       */
      public Builder setPasswordBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        password_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object quota_ = "";
      /**
       * <code>string quota = 11;</code>
       */
      public java.lang.String getQuota() {
        java.lang.Object ref = quota_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          quota_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string quota = 11;</code>
       */
      public com.google.protobuf.ByteString
          getQuotaBytes() {
        java.lang.Object ref = quota_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          quota_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string quota = 11;</code>
       */
      public Builder setQuota(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        quota_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string quota = 11;</code>
       */
      public Builder clearQuota() {

        quota_ = getDefaultInstance().getQuota();
        onChanged();
        return this;
      }
      /**
       * <code>string quota = 11;</code>
       */
      public Builder setQuotaBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        quota_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object sessionId_ = "";
      /**
       * <pre>
       * Works exactly like sessions in the HTTP protocol.
       * </pre>
       *
       * <code>string session_id = 12;</code>
       */
      public java.lang.String getSessionId() {
        java.lang.Object ref = sessionId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sessionId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Works exactly like sessions in the HTTP protocol.
       * </pre>
       *
       * <code>string session_id = 12;</code>
       */
      public com.google.protobuf.ByteString
          getSessionIdBytes() {
        java.lang.Object ref = sessionId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sessionId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Works exactly like sessions in the HTTP protocol.
       * </pre>
       *
       * <code>string session_id = 12;</code>
       */
      public Builder setSessionId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        sessionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Works exactly like sessions in the HTTP protocol.
       * </pre>
       *
       * <code>string session_id = 12;</code>
       */
      public Builder clearSessionId() {

        sessionId_ = getDefaultInstance().getSessionId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Works exactly like sessions in the HTTP protocol.
       * </pre>
       *
       * <code>string session_id = 12;</code>
       */
      public Builder setSessionIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        sessionId_ = value;
        onChanged();
        return this;
      }

      private boolean sessionCheck_ ;
      /**
       * <code>bool session_check = 13;</code>
       */
      public boolean getSessionCheck() {
        return sessionCheck_;
      }
      /**
       * <code>bool session_check = 13;</code>
       */
      public Builder setSessionCheck(boolean value) {

        sessionCheck_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool session_check = 13;</code>
       */
      public Builder clearSessionCheck() {

        sessionCheck_ = false;
        onChanged();
        return this;
      }

      private int sessionTimeout_ ;
      /**
       * <code>uint32 session_timeout = 14;</code>
       */
      public int getSessionTimeout() {
        return sessionTimeout_;
      }
      /**
       * <code>uint32 session_timeout = 14;</code>
       */
      public Builder setSessionTimeout(int value) {

        sessionTimeout_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 session_timeout = 14;</code>
       */
      public Builder clearSessionTimeout() {

        sessionTimeout_ = 0;
        onChanged();
        return this;
      }

      private boolean cancel_ ;
      /**
       * <pre>
       * Set `cancel` to true to stop executing the query.
       * </pre>
       *
       * <code>bool cancel = 15;</code>
       */
      public boolean getCancel() {
        return cancel_;
      }
      /**
       * <pre>
       * Set `cancel` to true to stop executing the query.
       * </pre>
       *
       * <code>bool cancel = 15;</code>
       */
      public Builder setCancel(boolean value) {

        cancel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set `cancel` to true to stop executing the query.
       * </pre>
       *
       * <code>bool cancel = 15;</code>
       */
      public Builder clearCancel() {

        cancel_ = false;
        onChanged();
        return this;
      }

      private boolean nextQueryInfo_ ;
      /**
       * <pre>
       * If true there will be at least one more QueryInfo in the input stream.
       * `next_query_info` is allowed to be set only if a method with streaming input (i.e. ExecuteQueryWithStreamInput() or ExecuteQueryWithStreamIO()) is used.
       * </pre>
       *
       * <code>bool next_query_info = 16;</code>
       */
      public boolean getNextQueryInfo() {
        return nextQueryInfo_;
      }
      /**
       * <pre>
       * If true there will be at least one more QueryInfo in the input stream.
       * `next_query_info` is allowed to be set only if a method with streaming input (i.e. ExecuteQueryWithStreamInput() or ExecuteQueryWithStreamIO()) is used.
       * </pre>
       *
       * <code>bool next_query_info = 16;</code>
       */
      public Builder setNextQueryInfo(boolean value) {

        nextQueryInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true there will be at least one more QueryInfo in the input stream.
       * `next_query_info` is allowed to be set only if a method with streaming input (i.e. ExecuteQueryWithStreamInput() or ExecuteQueryWithStreamIO()) is used.
       * </pre>
       *
       * <code>bool next_query_info = 16;</code>
       */
      public Builder clearNextQueryInfo() {

        nextQueryInfo_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object inputCompressionType_ = "";
      /**
       * <pre>
       * Compression type for `input_data`.
       * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * The client is responsible to compress data before putting it into `input_data`.
       * </pre>
       *
       * <code>string input_compression_type = 20;</code>
       */
      public java.lang.String getInputCompressionType() {
        java.lang.Object ref = inputCompressionType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          inputCompressionType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Compression type for `input_data`.
       * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * The client is responsible to compress data before putting it into `input_data`.
       * </pre>
       *
       * <code>string input_compression_type = 20;</code>
       */
      public com.google.protobuf.ByteString
          getInputCompressionTypeBytes() {
        java.lang.Object ref = inputCompressionType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          inputCompressionType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Compression type for `input_data`.
       * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * The client is responsible to compress data before putting it into `input_data`.
       * </pre>
       *
       * <code>string input_compression_type = 20;</code>
       */
      public Builder setInputCompressionType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        inputCompressionType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Compression type for `input_data`.
       * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * The client is responsible to compress data before putting it into `input_data`.
       * </pre>
       *
       * <code>string input_compression_type = 20;</code>
       */
      public Builder clearInputCompressionType() {

        inputCompressionType_ = getDefaultInstance().getInputCompressionType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Compression type for `input_data`.
       * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * The client is responsible to compress data before putting it into `input_data`.
       * </pre>
       *
       * <code>string input_compression_type = 20;</code>
       */
      public Builder setInputCompressionTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        inputCompressionType_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object outputCompressionType_ = "";
      /**
       * <pre>
       * Compression type for `output_data`, `totals` and `extremes`.
       * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * The client receives compressed data and should decompress it by itself.
       * Consider also setting `output_compression_level`.
       * </pre>
       *
       * <code>string output_compression_type = 21;</code>
       */
      public java.lang.String getOutputCompressionType() {
        java.lang.Object ref = outputCompressionType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          outputCompressionType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Compression type for `output_data`, `totals` and `extremes`.
       * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * The client receives compressed data and should decompress it by itself.
       * Consider also setting `output_compression_level`.
       * </pre>
       *
       * <code>string output_compression_type = 21;</code>
       */
      public com.google.protobuf.ByteString
          getOutputCompressionTypeBytes() {
        java.lang.Object ref = outputCompressionType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          outputCompressionType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Compression type for `output_data`, `totals` and `extremes`.
       * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * The client receives compressed data and should decompress it by itself.
       * Consider also setting `output_compression_level`.
       * </pre>
       *
       * <code>string output_compression_type = 21;</code>
       */
      public Builder setOutputCompressionType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        outputCompressionType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Compression type for `output_data`, `totals` and `extremes`.
       * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * The client receives compressed data and should decompress it by itself.
       * Consider also setting `output_compression_level`.
       * </pre>
       *
       * <code>string output_compression_type = 21;</code>
       */
      public Builder clearOutputCompressionType() {

        outputCompressionType_ = getDefaultInstance().getOutputCompressionType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Compression type for `output_data`, `totals` and `extremes`.
       * Supported compression types: none, gzip(gz), deflate, brotli(br), lzma(xz), zstd(zst), lz4, bz2.
       * The client receives compressed data and should decompress it by itself.
       * Consider also setting `output_compression_level`.
       * </pre>
       *
       * <code>string output_compression_type = 21;</code>
       */
      public Builder setOutputCompressionTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        outputCompressionType_ = value;
        onChanged();
        return this;
      }

      private int outputCompressionLevel_ ;
      /**
       * <pre>
       * Compression level.
       * WARNING: If it's not specified the compression level is set to zero by default which might be not the best choice for some compression types (see below).
       * The compression level should be in the following range (the higher the number, the better the compression):
       * none: compression level isn't used
       * gzip: 0..9; 0 means no compression, 6 is recommended by default (compression level -1 also means 6)
       * brotli: 0..11
       * lzma: 0..9; 6 is recommended by default
       * zstd: 1..22; 3 is recommended by default (compression level 0 also means 3)
       * lz4: 0..16; values &lt; 0 mean fast acceleration
       * bz2: 1..9
       * </pre>
       *
       * <code>int32 output_compression_level = 19;</code>
       */
      public int getOutputCompressionLevel() {
        return outputCompressionLevel_;
      }
      /**
       * <pre>
       * Compression level.
       * WARNING: If it's not specified the compression level is set to zero by default which might be not the best choice for some compression types (see below).
       * The compression level should be in the following range (the higher the number, the better the compression):
       * none: compression level isn't used
       * gzip: 0..9; 0 means no compression, 6 is recommended by default (compression level -1 also means 6)
       * brotli: 0..11
       * lzma: 0..9; 6 is recommended by default
       * zstd: 1..22; 3 is recommended by default (compression level 0 also means 3)
       * lz4: 0..16; values &lt; 0 mean fast acceleration
       * bz2: 1..9
       * </pre>
       *
       * <code>int32 output_compression_level = 19;</code>
       */
      public Builder setOutputCompressionLevel(int value) {

        outputCompressionLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Compression level.
       * WARNING: If it's not specified the compression level is set to zero by default which might be not the best choice for some compression types (see below).
       * The compression level should be in the following range (the higher the number, the better the compression):
       * none: compression level isn't used
       * gzip: 0..9; 0 means no compression, 6 is recommended by default (compression level -1 also means 6)
       * brotli: 0..11
       * lzma: 0..9; 6 is recommended by default
       * zstd: 1..22; 3 is recommended by default (compression level 0 also means 3)
       * lz4: 0..16; values &lt; 0 mean fast acceleration
       * bz2: 1..9
       * </pre>
       *
       * <code>int32 output_compression_level = 19;</code>
       */
      public Builder clearOutputCompressionLevel() {

        outputCompressionLevel_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object transportCompressionType_ = "";
      /**
       * <pre>
       * Transport compression is an alternative way to make the server to compress its response.
       * This kind of compression implies that instead of compressing just `output` the server will compress whole packed messages of the `Result` type,
       * and then gRPC implementation on client side will decompress those messages so client code won't be bothered with decompression.
       * Here is a big difference between the transport compression and the compression enabled by setting `output_compression_type` because
       * in case of the transport compression the client code receives already decompressed data in `output`.
       * If the transport compression is not set here it can still be enabled by the server configuration.
       * Supported compression types: none, deflate, gzip, stream_gzip
       * Supported compression levels: 0..3
       * WARNING: Don't set `transport_compression` and `output_compression` at the same time because it will make the server to compress its output twice!
       * </pre>
       *
       * <code>string transport_compression_type = 22;</code>
       */
      public java.lang.String getTransportCompressionType() {
        java.lang.Object ref = transportCompressionType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transportCompressionType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Transport compression is an alternative way to make the server to compress its response.
       * This kind of compression implies that instead of compressing just `output` the server will compress whole packed messages of the `Result` type,
       * and then gRPC implementation on client side will decompress those messages so client code won't be bothered with decompression.
       * Here is a big difference between the transport compression and the compression enabled by setting `output_compression_type` because
       * in case of the transport compression the client code receives already decompressed data in `output`.
       * If the transport compression is not set here it can still be enabled by the server configuration.
       * Supported compression types: none, deflate, gzip, stream_gzip
       * Supported compression levels: 0..3
       * WARNING: Don't set `transport_compression` and `output_compression` at the same time because it will make the server to compress its output twice!
       * </pre>
       *
       * <code>string transport_compression_type = 22;</code>
       */
      public com.google.protobuf.ByteString
          getTransportCompressionTypeBytes() {
        java.lang.Object ref = transportCompressionType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transportCompressionType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Transport compression is an alternative way to make the server to compress its response.
       * This kind of compression implies that instead of compressing just `output` the server will compress whole packed messages of the `Result` type,
       * and then gRPC implementation on client side will decompress those messages so client code won't be bothered with decompression.
       * Here is a big difference between the transport compression and the compression enabled by setting `output_compression_type` because
       * in case of the transport compression the client code receives already decompressed data in `output`.
       * If the transport compression is not set here it can still be enabled by the server configuration.
       * Supported compression types: none, deflate, gzip, stream_gzip
       * Supported compression levels: 0..3
       * WARNING: Don't set `transport_compression` and `output_compression` at the same time because it will make the server to compress its output twice!
       * </pre>
       *
       * <code>string transport_compression_type = 22;</code>
       */
      public Builder setTransportCompressionType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        transportCompressionType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Transport compression is an alternative way to make the server to compress its response.
       * This kind of compression implies that instead of compressing just `output` the server will compress whole packed messages of the `Result` type,
       * and then gRPC implementation on client side will decompress those messages so client code won't be bothered with decompression.
       * Here is a big difference between the transport compression and the compression enabled by setting `output_compression_type` because
       * in case of the transport compression the client code receives already decompressed data in `output`.
       * If the transport compression is not set here it can still be enabled by the server configuration.
       * Supported compression types: none, deflate, gzip, stream_gzip
       * Supported compression levels: 0..3
       * WARNING: Don't set `transport_compression` and `output_compression` at the same time because it will make the server to compress its output twice!
       * </pre>
       *
       * <code>string transport_compression_type = 22;</code>
       */
      public Builder clearTransportCompressionType() {

        transportCompressionType_ = getDefaultInstance().getTransportCompressionType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Transport compression is an alternative way to make the server to compress its response.
       * This kind of compression implies that instead of compressing just `output` the server will compress whole packed messages of the `Result` type,
       * and then gRPC implementation on client side will decompress those messages so client code won't be bothered with decompression.
       * Here is a big difference between the transport compression and the compression enabled by setting `output_compression_type` because
       * in case of the transport compression the client code receives already decompressed data in `output`.
       * If the transport compression is not set here it can still be enabled by the server configuration.
       * Supported compression types: none, deflate, gzip, stream_gzip
       * Supported compression levels: 0..3
       * WARNING: Don't set `transport_compression` and `output_compression` at the same time because it will make the server to compress its output twice!
       * </pre>
       *
       * <code>string transport_compression_type = 22;</code>
       */
      public Builder setTransportCompressionTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        transportCompressionType_ = value;
        onChanged();
        return this;
      }

      private int transportCompressionLevel_ ;
      /**
       * <code>int32 transport_compression_level = 23;</code>
       */
      public int getTransportCompressionLevel() {
        return transportCompressionLevel_;
      }
      /**
       * <code>int32 transport_compression_level = 23;</code>
       */
      public Builder setTransportCompressionLevel(int value) {

        transportCompressionLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 transport_compression_level = 23;</code>
       */
      public Builder clearTransportCompressionLevel() {

        transportCompressionLevel_ = 0;
        onChanged();
        return this;
      }

      private ClickhouseGrpc.ObsoleteTransportCompression obsoleteResultCompression_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          ClickhouseGrpc.ObsoleteTransportCompression, ClickhouseGrpc.ObsoleteTransportCompression.Builder, ClickhouseGrpc.ObsoleteTransportCompressionOrBuilder> obsoleteResultCompressionBuilder_;
      /**
       * <pre>
       *&#47; Obsolete fields, should not be used in new code.
       * </pre>
       *
       * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
       */
      public boolean hasObsoleteResultCompression() {
        return obsoleteResultCompressionBuilder_ != null || obsoleteResultCompression_ != null;
      }
      /**
       * <pre>
       *&#47; Obsolete fields, should not be used in new code.
       * </pre>
       *
       * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
       */
      public ClickhouseGrpc.ObsoleteTransportCompression getObsoleteResultCompression() {
        if (obsoleteResultCompressionBuilder_ == null) {
          return obsoleteResultCompression_ == null ? ClickhouseGrpc.ObsoleteTransportCompression.getDefaultInstance() : obsoleteResultCompression_;
        } else {
          return obsoleteResultCompressionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *&#47; Obsolete fields, should not be used in new code.
       * </pre>
       *
       * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
       */
      public Builder setObsoleteResultCompression(ClickhouseGrpc.ObsoleteTransportCompression value) {
        if (obsoleteResultCompressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          obsoleteResultCompression_ = value;
          onChanged();
        } else {
          obsoleteResultCompressionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *&#47; Obsolete fields, should not be used in new code.
       * </pre>
       *
       * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
       */
      public Builder setObsoleteResultCompression(
          ClickhouseGrpc.ObsoleteTransportCompression.Builder builderForValue) {
        if (obsoleteResultCompressionBuilder_ == null) {
          obsoleteResultCompression_ = builderForValue.build();
          onChanged();
        } else {
          obsoleteResultCompressionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *&#47; Obsolete fields, should not be used in new code.
       * </pre>
       *
       * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
       */
      public Builder mergeObsoleteResultCompression(ClickhouseGrpc.ObsoleteTransportCompression value) {
        if (obsoleteResultCompressionBuilder_ == null) {
          if (obsoleteResultCompression_ != null) {
            obsoleteResultCompression_ =
              ClickhouseGrpc.ObsoleteTransportCompression.newBuilder(obsoleteResultCompression_).mergeFrom(value).buildPartial();
          } else {
            obsoleteResultCompression_ = value;
          }
          onChanged();
        } else {
          obsoleteResultCompressionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *&#47; Obsolete fields, should not be used in new code.
       * </pre>
       *
       * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
       */
      public Builder clearObsoleteResultCompression() {
        if (obsoleteResultCompressionBuilder_ == null) {
          obsoleteResultCompression_ = null;
          onChanged();
        } else {
          obsoleteResultCompression_ = null;
          obsoleteResultCompressionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *&#47; Obsolete fields, should not be used in new code.
       * </pre>
       *
       * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
       */
      public ClickhouseGrpc.ObsoleteTransportCompression.Builder getObsoleteResultCompressionBuilder() {

        onChanged();
        return getObsoleteResultCompressionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *&#47; Obsolete fields, should not be used in new code.
       * </pre>
       *
       * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
       */
      public ClickhouseGrpc.ObsoleteTransportCompressionOrBuilder getObsoleteResultCompressionOrBuilder() {
        if (obsoleteResultCompressionBuilder_ != null) {
          return obsoleteResultCompressionBuilder_.getMessageOrBuilder();
        } else {
          return obsoleteResultCompression_ == null ?
              ClickhouseGrpc.ObsoleteTransportCompression.getDefaultInstance() : obsoleteResultCompression_;
        }
      }
      /**
       * <pre>
       *&#47; Obsolete fields, should not be used in new code.
       * </pre>
       *
       * <code>.clickhouse.grpc.ObsoleteTransportCompression obsolete_result_compression = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          ClickhouseGrpc.ObsoleteTransportCompression, ClickhouseGrpc.ObsoleteTransportCompression.Builder, ClickhouseGrpc.ObsoleteTransportCompressionOrBuilder>
          getObsoleteResultCompressionFieldBuilder() {
        if (obsoleteResultCompressionBuilder_ == null) {
          obsoleteResultCompressionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              ClickhouseGrpc.ObsoleteTransportCompression, ClickhouseGrpc.ObsoleteTransportCompression.Builder, ClickhouseGrpc.ObsoleteTransportCompressionOrBuilder>(
                  getObsoleteResultCompression(),
                  getParentForChildren(),
                  isClean());
          obsoleteResultCompression_ = null;
        }
        return obsoleteResultCompressionBuilder_;
      }

      private java.lang.Object obsoleteCompressionType_ = "";
      /**
       * <code>string obsolete_compression_type = 18;</code>
       */
      public java.lang.String getObsoleteCompressionType() {
        java.lang.Object ref = obsoleteCompressionType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          obsoleteCompressionType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string obsolete_compression_type = 18;</code>
       */
      public com.google.protobuf.ByteString
          getObsoleteCompressionTypeBytes() {
        java.lang.Object ref = obsoleteCompressionType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          obsoleteCompressionType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string obsolete_compression_type = 18;</code>
       */
      public Builder setObsoleteCompressionType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        obsoleteCompressionType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string obsolete_compression_type = 18;</code>
       */
      public Builder clearObsoleteCompressionType() {

        obsoleteCompressionType_ = getDefaultInstance().getObsoleteCompressionType();
        onChanged();
        return this;
      }
      /**
       * <code>string obsolete_compression_type = 18;</code>
       */
      public Builder setObsoleteCompressionTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        obsoleteCompressionType_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clickhouse.grpc.QueryInfo)
    }

    // @@protoc_insertion_point(class_scope:clickhouse.grpc.QueryInfo)
    private static final ClickhouseGrpc.QueryInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ClickhouseGrpc.QueryInfo();
    }

    public static ClickhouseGrpc.QueryInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<QueryInfo>
        PARSER = new com.google.protobuf.AbstractParser<QueryInfo>() {
      public QueryInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new QueryInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<QueryInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<QueryInfo> getParserForType() {
      return PARSER;
    }

    public ClickhouseGrpc.QueryInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LogEntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clickhouse.grpc.LogEntry)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint32 time = 1;</code>
     */
    int getTime();

    /**
     * <code>uint32 time_microseconds = 2;</code>
     */
    int getTimeMicroseconds();

    /**
     * <code>uint64 thread_id = 3;</code>
     */
    long getThreadId();

    /**
     * <code>string query_id = 4;</code>
     */
    java.lang.String getQueryId();
    /**
     * <code>string query_id = 4;</code>
     */
    com.google.protobuf.ByteString
        getQueryIdBytes();

    /**
     * <code>.clickhouse.grpc.LogsLevel level = 5;</code>
     */
    int getLevelValue();
    /**
     * <code>.clickhouse.grpc.LogsLevel level = 5;</code>
     */
    ClickhouseGrpc.LogsLevel getLevel();

    /**
     * <code>string source = 6;</code>
     */
    java.lang.String getSource();
    /**
     * <code>string source = 6;</code>
     */
    com.google.protobuf.ByteString
        getSourceBytes();

    /**
     * <code>string text = 7;</code>
     */
    java.lang.String getText();
    /**
     * <code>string text = 7;</code>
     */
    com.google.protobuf.ByteString
        getTextBytes();
  }
  /**
   * Protobuf type {@code clickhouse.grpc.LogEntry}
   */
  public  static final class LogEntry extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clickhouse.grpc.LogEntry)
      LogEntryOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LogEntry.newBuilder() to construct.
    private LogEntry(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LogEntry() {
      time_ = 0;
      timeMicroseconds_ = 0;
      threadId_ = 0L;
      queryId_ = "";
      level_ = 0;
      source_ = "";
      text_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LogEntry(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              time_ = input.readUInt32();
              break;
            }
            case 16: {

              timeMicroseconds_ = input.readUInt32();
              break;
            }
            case 24: {

              threadId_ = input.readUInt64();
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              queryId_ = s;
              break;
            }
            case 40: {
              int rawValue = input.readEnum();

              level_ = rawValue;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              source_ = s;
              break;
            }
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();

              text_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_LogEntry_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_LogEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ClickhouseGrpc.LogEntry.class, ClickhouseGrpc.LogEntry.Builder.class);
    }

    public static final int TIME_FIELD_NUMBER = 1;
    private int time_;
    /**
     * <code>uint32 time = 1;</code>
     */
    public int getTime() {
      return time_;
    }

    public static final int TIME_MICROSECONDS_FIELD_NUMBER = 2;
    private int timeMicroseconds_;
    /**
     * <code>uint32 time_microseconds = 2;</code>
     */
    public int getTimeMicroseconds() {
      return timeMicroseconds_;
    }

    public static final int THREAD_ID_FIELD_NUMBER = 3;
    private long threadId_;
    /**
     * <code>uint64 thread_id = 3;</code>
     */
    public long getThreadId() {
      return threadId_;
    }

    public static final int QUERY_ID_FIELD_NUMBER = 4;
    private volatile java.lang.Object queryId_;
    /**
     * <code>string query_id = 4;</code>
     */
    public java.lang.String getQueryId() {
      java.lang.Object ref = queryId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        queryId_ = s;
        return s;
      }
    }
    /**
     * <code>string query_id = 4;</code>
     */
    public com.google.protobuf.ByteString
        getQueryIdBytes() {
      java.lang.Object ref = queryId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        queryId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LEVEL_FIELD_NUMBER = 5;
    private int level_;
    /**
     * <code>.clickhouse.grpc.LogsLevel level = 5;</code>
     */
    public int getLevelValue() {
      return level_;
    }
    /**
     * <code>.clickhouse.grpc.LogsLevel level = 5;</code>
     */
    public ClickhouseGrpc.LogsLevel getLevel() {
      ClickhouseGrpc.LogsLevel result = ClickhouseGrpc.LogsLevel.valueOf(level_);
      return result == null ? ClickhouseGrpc.LogsLevel.UNRECOGNIZED : result;
    }

    public static final int SOURCE_FIELD_NUMBER = 6;
    private volatile java.lang.Object source_;
    /**
     * <code>string source = 6;</code>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        source_ = s;
        return s;
      }
    }
    /**
     * <code>string source = 6;</code>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TEXT_FIELD_NUMBER = 7;
    private volatile java.lang.Object text_;
    /**
     * <code>string text = 7;</code>
     */
    public java.lang.String getText() {
      java.lang.Object ref = text_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        text_ = s;
        return s;
      }
    }
    /**
     * <code>string text = 7;</code>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      java.lang.Object ref = text_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        text_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (time_ != 0) {
        output.writeUInt32(1, time_);
      }
      if (timeMicroseconds_ != 0) {
        output.writeUInt32(2, timeMicroseconds_);
      }
      if (threadId_ != 0L) {
        output.writeUInt64(3, threadId_);
      }
      if (!getQueryIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, queryId_);
      }
      if (level_ != ClickhouseGrpc.LogsLevel.LOG_NONE.getNumber()) {
        output.writeEnum(5, level_);
      }
      if (!getSourceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, source_);
      }
      if (!getTextBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, text_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (time_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, time_);
      }
      if (timeMicroseconds_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, timeMicroseconds_);
      }
      if (threadId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, threadId_);
      }
      if (!getQueryIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, queryId_);
      }
      if (level_ != ClickhouseGrpc.LogsLevel.LOG_NONE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, level_);
      }
      if (!getSourceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, source_);
      }
      if (!getTextBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, text_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ClickhouseGrpc.LogEntry)) {
        return super.equals(obj);
      }
      ClickhouseGrpc.LogEntry other = (ClickhouseGrpc.LogEntry) obj;

      boolean result = true;
      result = result && (getTime()
          == other.getTime());
      result = result && (getTimeMicroseconds()
          == other.getTimeMicroseconds());
      result = result && (getThreadId()
          == other.getThreadId());
      result = result && getQueryId()
          .equals(other.getQueryId());
      result = result && level_ == other.level_;
      result = result && getSource()
          .equals(other.getSource());
      result = result && getText()
          .equals(other.getText());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TIME_FIELD_NUMBER;
      hash = (53 * hash) + getTime();
      hash = (37 * hash) + TIME_MICROSECONDS_FIELD_NUMBER;
      hash = (53 * hash) + getTimeMicroseconds();
      hash = (37 * hash) + THREAD_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getThreadId());
      hash = (37 * hash) + QUERY_ID_FIELD_NUMBER;
      hash = (53 * hash) + getQueryId().hashCode();
      hash = (37 * hash) + LEVEL_FIELD_NUMBER;
      hash = (53 * hash) + level_;
      hash = (37 * hash) + SOURCE_FIELD_NUMBER;
      hash = (53 * hash) + getSource().hashCode();
      hash = (37 * hash) + TEXT_FIELD_NUMBER;
      hash = (53 * hash) + getText().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ClickhouseGrpc.LogEntry parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.LogEntry parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.LogEntry parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.LogEntry parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.LogEntry parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.LogEntry parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.LogEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.LogEntry parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.LogEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.LogEntry parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.LogEntry parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.LogEntry parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ClickhouseGrpc.LogEntry prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code clickhouse.grpc.LogEntry}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clickhouse.grpc.LogEntry)
        ClickhouseGrpc.LogEntryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_LogEntry_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_LogEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ClickhouseGrpc.LogEntry.class, ClickhouseGrpc.LogEntry.Builder.class);
      }

      // Construct using clickhouse.grpc.ClickhouseGrpc.LogEntry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        time_ = 0;

        timeMicroseconds_ = 0;

        threadId_ = 0L;

        queryId_ = "";

        level_ = 0;

        source_ = "";

        text_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_LogEntry_descriptor;
      }

      public ClickhouseGrpc.LogEntry getDefaultInstanceForType() {
        return ClickhouseGrpc.LogEntry.getDefaultInstance();
      }

      public ClickhouseGrpc.LogEntry build() {
        ClickhouseGrpc.LogEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ClickhouseGrpc.LogEntry buildPartial() {
        ClickhouseGrpc.LogEntry result = new ClickhouseGrpc.LogEntry(this);
        result.time_ = time_;
        result.timeMicroseconds_ = timeMicroseconds_;
        result.threadId_ = threadId_;
        result.queryId_ = queryId_;
        result.level_ = level_;
        result.source_ = source_;
        result.text_ = text_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ClickhouseGrpc.LogEntry) {
          return mergeFrom((ClickhouseGrpc.LogEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ClickhouseGrpc.LogEntry other) {
        if (other == ClickhouseGrpc.LogEntry.getDefaultInstance()) return this;
        if (other.getTime() != 0) {
          setTime(other.getTime());
        }
        if (other.getTimeMicroseconds() != 0) {
          setTimeMicroseconds(other.getTimeMicroseconds());
        }
        if (other.getThreadId() != 0L) {
          setThreadId(other.getThreadId());
        }
        if (!other.getQueryId().isEmpty()) {
          queryId_ = other.queryId_;
          onChanged();
        }
        if (other.level_ != 0) {
          setLevelValue(other.getLevelValue());
        }
        if (!other.getSource().isEmpty()) {
          source_ = other.source_;
          onChanged();
        }
        if (!other.getText().isEmpty()) {
          text_ = other.text_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ClickhouseGrpc.LogEntry parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ClickhouseGrpc.LogEntry) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int time_ ;
      /**
       * <code>uint32 time = 1;</code>
       */
      public int getTime() {
        return time_;
      }
      /**
       * <code>uint32 time = 1;</code>
       */
      public Builder setTime(int value) {

        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 time = 1;</code>
       */
      public Builder clearTime() {

        time_ = 0;
        onChanged();
        return this;
      }

      private int timeMicroseconds_ ;
      /**
       * <code>uint32 time_microseconds = 2;</code>
       */
      public int getTimeMicroseconds() {
        return timeMicroseconds_;
      }
      /**
       * <code>uint32 time_microseconds = 2;</code>
       */
      public Builder setTimeMicroseconds(int value) {

        timeMicroseconds_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 time_microseconds = 2;</code>
       */
      public Builder clearTimeMicroseconds() {

        timeMicroseconds_ = 0;
        onChanged();
        return this;
      }

      private long threadId_ ;
      /**
       * <code>uint64 thread_id = 3;</code>
       */
      public long getThreadId() {
        return threadId_;
      }
      /**
       * <code>uint64 thread_id = 3;</code>
       */
      public Builder setThreadId(long value) {

        threadId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 thread_id = 3;</code>
       */
      public Builder clearThreadId() {

        threadId_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object queryId_ = "";
      /**
       * <code>string query_id = 4;</code>
       */
      public java.lang.String getQueryId() {
        java.lang.Object ref = queryId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          queryId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string query_id = 4;</code>
       */
      public com.google.protobuf.ByteString
          getQueryIdBytes() {
        java.lang.Object ref = queryId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          queryId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string query_id = 4;</code>
       */
      public Builder setQueryId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        queryId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string query_id = 4;</code>
       */
      public Builder clearQueryId() {

        queryId_ = getDefaultInstance().getQueryId();
        onChanged();
        return this;
      }
      /**
       * <code>string query_id = 4;</code>
       */
      public Builder setQueryIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        queryId_ = value;
        onChanged();
        return this;
      }

      private int level_ = 0;
      /**
       * <code>.clickhouse.grpc.LogsLevel level = 5;</code>
       */
      public int getLevelValue() {
        return level_;
      }
      /**
       * <code>.clickhouse.grpc.LogsLevel level = 5;</code>
       */
      public Builder setLevelValue(int value) {
        level_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.clickhouse.grpc.LogsLevel level = 5;</code>
       */
      public ClickhouseGrpc.LogsLevel getLevel() {
        ClickhouseGrpc.LogsLevel result = ClickhouseGrpc.LogsLevel.valueOf(level_);
        return result == null ? ClickhouseGrpc.LogsLevel.UNRECOGNIZED : result;
      }
      /**
       * <code>.clickhouse.grpc.LogsLevel level = 5;</code>
       */
      public Builder setLevel(ClickhouseGrpc.LogsLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }

        level_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.clickhouse.grpc.LogsLevel level = 5;</code>
       */
      public Builder clearLevel() {

        level_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object source_ = "";
      /**
       * <code>string source = 6;</code>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          source_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string source = 6;</code>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string source = 6;</code>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string source = 6;</code>
       */
      public Builder clearSource() {

        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <code>string source = 6;</code>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        source_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object text_ = "";
      /**
       * <code>string text = 7;</code>
       */
      public java.lang.String getText() {
        java.lang.Object ref = text_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          text_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string text = 7;</code>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        java.lang.Object ref = text_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          text_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string text = 7;</code>
       */
      public Builder setText(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        text_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string text = 7;</code>
       */
      public Builder clearText() {

        text_ = getDefaultInstance().getText();
        onChanged();
        return this;
      }
      /**
       * <code>string text = 7;</code>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        text_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clickhouse.grpc.LogEntry)
    }

    // @@protoc_insertion_point(class_scope:clickhouse.grpc.LogEntry)
    private static final ClickhouseGrpc.LogEntry DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ClickhouseGrpc.LogEntry();
    }

    public static ClickhouseGrpc.LogEntry getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LogEntry>
        PARSER = new com.google.protobuf.AbstractParser<LogEntry>() {
      public LogEntry parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LogEntry(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LogEntry> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LogEntry> getParserForType() {
      return PARSER;
    }

    public ClickhouseGrpc.LogEntry getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProgressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clickhouse.grpc.Progress)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint64 read_rows = 1;</code>
     */
    long getReadRows();

    /**
     * <code>uint64 read_bytes = 2;</code>
     */
    long getReadBytes();

    /**
     * <code>uint64 total_rows_to_read = 3;</code>
     */
    long getTotalRowsToRead();

    /**
     * <code>uint64 written_rows = 4;</code>
     */
    long getWrittenRows();

    /**
     * <code>uint64 written_bytes = 5;</code>
     */
    long getWrittenBytes();
  }
  /**
   * Protobuf type {@code clickhouse.grpc.Progress}
   */
  public  static final class Progress extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clickhouse.grpc.Progress)
      ProgressOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Progress.newBuilder() to construct.
    private Progress(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Progress() {
      readRows_ = 0L;
      readBytes_ = 0L;
      totalRowsToRead_ = 0L;
      writtenRows_ = 0L;
      writtenBytes_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Progress(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              readRows_ = input.readUInt64();
              break;
            }
            case 16: {

              readBytes_ = input.readUInt64();
              break;
            }
            case 24: {

              totalRowsToRead_ = input.readUInt64();
              break;
            }
            case 32: {

              writtenRows_ = input.readUInt64();
              break;
            }
            case 40: {

              writtenBytes_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_Progress_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_Progress_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ClickhouseGrpc.Progress.class, ClickhouseGrpc.Progress.Builder.class);
    }

    public static final int READ_ROWS_FIELD_NUMBER = 1;
    private long readRows_;
    /**
     * <code>uint64 read_rows = 1;</code>
     */
    public long getReadRows() {
      return readRows_;
    }

    public static final int READ_BYTES_FIELD_NUMBER = 2;
    private long readBytes_;
    /**
     * <code>uint64 read_bytes = 2;</code>
     */
    public long getReadBytes() {
      return readBytes_;
    }

    public static final int TOTAL_ROWS_TO_READ_FIELD_NUMBER = 3;
    private long totalRowsToRead_;
    /**
     * <code>uint64 total_rows_to_read = 3;</code>
     */
    public long getTotalRowsToRead() {
      return totalRowsToRead_;
    }

    public static final int WRITTEN_ROWS_FIELD_NUMBER = 4;
    private long writtenRows_;
    /**
     * <code>uint64 written_rows = 4;</code>
     */
    public long getWrittenRows() {
      return writtenRows_;
    }

    public static final int WRITTEN_BYTES_FIELD_NUMBER = 5;
    private long writtenBytes_;
    /**
     * <code>uint64 written_bytes = 5;</code>
     */
    public long getWrittenBytes() {
      return writtenBytes_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (readRows_ != 0L) {
        output.writeUInt64(1, readRows_);
      }
      if (readBytes_ != 0L) {
        output.writeUInt64(2, readBytes_);
      }
      if (totalRowsToRead_ != 0L) {
        output.writeUInt64(3, totalRowsToRead_);
      }
      if (writtenRows_ != 0L) {
        output.writeUInt64(4, writtenRows_);
      }
      if (writtenBytes_ != 0L) {
        output.writeUInt64(5, writtenBytes_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (readRows_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, readRows_);
      }
      if (readBytes_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, readBytes_);
      }
      if (totalRowsToRead_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, totalRowsToRead_);
      }
      if (writtenRows_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, writtenRows_);
      }
      if (writtenBytes_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, writtenBytes_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ClickhouseGrpc.Progress)) {
        return super.equals(obj);
      }
      ClickhouseGrpc.Progress other = (ClickhouseGrpc.Progress) obj;

      boolean result = true;
      result = result && (getReadRows()
          == other.getReadRows());
      result = result && (getReadBytes()
          == other.getReadBytes());
      result = result && (getTotalRowsToRead()
          == other.getTotalRowsToRead());
      result = result && (getWrittenRows()
          == other.getWrittenRows());
      result = result && (getWrittenBytes()
          == other.getWrittenBytes());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + READ_ROWS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getReadRows());
      hash = (37 * hash) + READ_BYTES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getReadBytes());
      hash = (37 * hash) + TOTAL_ROWS_TO_READ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTotalRowsToRead());
      hash = (37 * hash) + WRITTEN_ROWS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getWrittenRows());
      hash = (37 * hash) + WRITTEN_BYTES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getWrittenBytes());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ClickhouseGrpc.Progress parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.Progress parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.Progress parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.Progress parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.Progress parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.Progress parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.Progress parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.Progress parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.Progress parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.Progress parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.Progress parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.Progress parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ClickhouseGrpc.Progress prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code clickhouse.grpc.Progress}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clickhouse.grpc.Progress)
        ClickhouseGrpc.ProgressOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_Progress_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_Progress_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ClickhouseGrpc.Progress.class, ClickhouseGrpc.Progress.Builder.class);
      }

      // Construct using clickhouse.grpc.ClickhouseGrpc.Progress.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        readRows_ = 0L;

        readBytes_ = 0L;

        totalRowsToRead_ = 0L;

        writtenRows_ = 0L;

        writtenBytes_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_Progress_descriptor;
      }

      public ClickhouseGrpc.Progress getDefaultInstanceForType() {
        return ClickhouseGrpc.Progress.getDefaultInstance();
      }

      public ClickhouseGrpc.Progress build() {
        ClickhouseGrpc.Progress result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ClickhouseGrpc.Progress buildPartial() {
        ClickhouseGrpc.Progress result = new ClickhouseGrpc.Progress(this);
        result.readRows_ = readRows_;
        result.readBytes_ = readBytes_;
        result.totalRowsToRead_ = totalRowsToRead_;
        result.writtenRows_ = writtenRows_;
        result.writtenBytes_ = writtenBytes_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ClickhouseGrpc.Progress) {
          return mergeFrom((ClickhouseGrpc.Progress)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ClickhouseGrpc.Progress other) {
        if (other == ClickhouseGrpc.Progress.getDefaultInstance()) return this;
        if (other.getReadRows() != 0L) {
          setReadRows(other.getReadRows());
        }
        if (other.getReadBytes() != 0L) {
          setReadBytes(other.getReadBytes());
        }
        if (other.getTotalRowsToRead() != 0L) {
          setTotalRowsToRead(other.getTotalRowsToRead());
        }
        if (other.getWrittenRows() != 0L) {
          setWrittenRows(other.getWrittenRows());
        }
        if (other.getWrittenBytes() != 0L) {
          setWrittenBytes(other.getWrittenBytes());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ClickhouseGrpc.Progress parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ClickhouseGrpc.Progress) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long readRows_ ;
      /**
       * <code>uint64 read_rows = 1;</code>
       */
      public long getReadRows() {
        return readRows_;
      }
      /**
       * <code>uint64 read_rows = 1;</code>
       */
      public Builder setReadRows(long value) {

        readRows_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 read_rows = 1;</code>
       */
      public Builder clearReadRows() {

        readRows_ = 0L;
        onChanged();
        return this;
      }

      private long readBytes_ ;
      /**
       * <code>uint64 read_bytes = 2;</code>
       */
      public long getReadBytes() {
        return readBytes_;
      }
      /**
       * <code>uint64 read_bytes = 2;</code>
       */
      public Builder setReadBytes(long value) {

        readBytes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 read_bytes = 2;</code>
       */
      public Builder clearReadBytes() {

        readBytes_ = 0L;
        onChanged();
        return this;
      }

      private long totalRowsToRead_ ;
      /**
       * <code>uint64 total_rows_to_read = 3;</code>
       */
      public long getTotalRowsToRead() {
        return totalRowsToRead_;
      }
      /**
       * <code>uint64 total_rows_to_read = 3;</code>
       */
      public Builder setTotalRowsToRead(long value) {

        totalRowsToRead_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 total_rows_to_read = 3;</code>
       */
      public Builder clearTotalRowsToRead() {

        totalRowsToRead_ = 0L;
        onChanged();
        return this;
      }

      private long writtenRows_ ;
      /**
       * <code>uint64 written_rows = 4;</code>
       */
      public long getWrittenRows() {
        return writtenRows_;
      }
      /**
       * <code>uint64 written_rows = 4;</code>
       */
      public Builder setWrittenRows(long value) {

        writtenRows_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 written_rows = 4;</code>
       */
      public Builder clearWrittenRows() {

        writtenRows_ = 0L;
        onChanged();
        return this;
      }

      private long writtenBytes_ ;
      /**
       * <code>uint64 written_bytes = 5;</code>
       */
      public long getWrittenBytes() {
        return writtenBytes_;
      }
      /**
       * <code>uint64 written_bytes = 5;</code>
       */
      public Builder setWrittenBytes(long value) {

        writtenBytes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 written_bytes = 5;</code>
       */
      public Builder clearWrittenBytes() {

        writtenBytes_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clickhouse.grpc.Progress)
    }

    // @@protoc_insertion_point(class_scope:clickhouse.grpc.Progress)
    private static final ClickhouseGrpc.Progress DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ClickhouseGrpc.Progress();
    }

    public static ClickhouseGrpc.Progress getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Progress>
        PARSER = new com.google.protobuf.AbstractParser<Progress>() {
      public Progress parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Progress(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Progress> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Progress> getParserForType() {
      return PARSER;
    }

    public ClickhouseGrpc.Progress getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StatsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clickhouse.grpc.Stats)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint64 rows = 1;</code>
     */
    long getRows();

    /**
     * <code>uint64 blocks = 2;</code>
     */
    long getBlocks();

    /**
     * <code>uint64 allocated_bytes = 3;</code>
     */
    long getAllocatedBytes();

    /**
     * <code>bool applied_limit = 4;</code>
     */
    boolean getAppliedLimit();

    /**
     * <code>uint64 rows_before_limit = 5;</code>
     */
    long getRowsBeforeLimit();
  }
  /**
   * Protobuf type {@code clickhouse.grpc.Stats}
   */
  public  static final class Stats extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clickhouse.grpc.Stats)
      StatsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Stats.newBuilder() to construct.
    private Stats(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Stats() {
      rows_ = 0L;
      blocks_ = 0L;
      allocatedBytes_ = 0L;
      appliedLimit_ = false;
      rowsBeforeLimit_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Stats(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              rows_ = input.readUInt64();
              break;
            }
            case 16: {

              blocks_ = input.readUInt64();
              break;
            }
            case 24: {

              allocatedBytes_ = input.readUInt64();
              break;
            }
            case 32: {

              appliedLimit_ = input.readBool();
              break;
            }
            case 40: {

              rowsBeforeLimit_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_Stats_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_Stats_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ClickhouseGrpc.Stats.class, ClickhouseGrpc.Stats.Builder.class);
    }

    public static final int ROWS_FIELD_NUMBER = 1;
    private long rows_;
    /**
     * <code>uint64 rows = 1;</code>
     */
    public long getRows() {
      return rows_;
    }

    public static final int BLOCKS_FIELD_NUMBER = 2;
    private long blocks_;
    /**
     * <code>uint64 blocks = 2;</code>
     */
    public long getBlocks() {
      return blocks_;
    }

    public static final int ALLOCATED_BYTES_FIELD_NUMBER = 3;
    private long allocatedBytes_;
    /**
     * <code>uint64 allocated_bytes = 3;</code>
     */
    public long getAllocatedBytes() {
      return allocatedBytes_;
    }

    public static final int APPLIED_LIMIT_FIELD_NUMBER = 4;
    private boolean appliedLimit_;
    /**
     * <code>bool applied_limit = 4;</code>
     */
    public boolean getAppliedLimit() {
      return appliedLimit_;
    }

    public static final int ROWS_BEFORE_LIMIT_FIELD_NUMBER = 5;
    private long rowsBeforeLimit_;
    /**
     * <code>uint64 rows_before_limit = 5;</code>
     */
    public long getRowsBeforeLimit() {
      return rowsBeforeLimit_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (rows_ != 0L) {
        output.writeUInt64(1, rows_);
      }
      if (blocks_ != 0L) {
        output.writeUInt64(2, blocks_);
      }
      if (allocatedBytes_ != 0L) {
        output.writeUInt64(3, allocatedBytes_);
      }
      if (appliedLimit_ != false) {
        output.writeBool(4, appliedLimit_);
      }
      if (rowsBeforeLimit_ != 0L) {
        output.writeUInt64(5, rowsBeforeLimit_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (rows_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, rows_);
      }
      if (blocks_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, blocks_);
      }
      if (allocatedBytes_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, allocatedBytes_);
      }
      if (appliedLimit_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, appliedLimit_);
      }
      if (rowsBeforeLimit_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, rowsBeforeLimit_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ClickhouseGrpc.Stats)) {
        return super.equals(obj);
      }
      ClickhouseGrpc.Stats other = (ClickhouseGrpc.Stats) obj;

      boolean result = true;
      result = result && (getRows()
          == other.getRows());
      result = result && (getBlocks()
          == other.getBlocks());
      result = result && (getAllocatedBytes()
          == other.getAllocatedBytes());
      result = result && (getAppliedLimit()
          == other.getAppliedLimit());
      result = result && (getRowsBeforeLimit()
          == other.getRowsBeforeLimit());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ROWS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getRows());
      hash = (37 * hash) + BLOCKS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getBlocks());
      hash = (37 * hash) + ALLOCATED_BYTES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getAllocatedBytes());
      hash = (37 * hash) + APPLIED_LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getAppliedLimit());
      hash = (37 * hash) + ROWS_BEFORE_LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getRowsBeforeLimit());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ClickhouseGrpc.Stats parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.Stats parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.Stats parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.Stats parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.Stats parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.Stats parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.Stats parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.Stats parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.Stats parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.Stats parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.Stats parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.Stats parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ClickhouseGrpc.Stats prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code clickhouse.grpc.Stats}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clickhouse.grpc.Stats)
        ClickhouseGrpc.StatsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_Stats_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_Stats_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ClickhouseGrpc.Stats.class, ClickhouseGrpc.Stats.Builder.class);
      }

      // Construct using clickhouse.grpc.ClickhouseGrpc.Stats.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        rows_ = 0L;

        blocks_ = 0L;

        allocatedBytes_ = 0L;

        appliedLimit_ = false;

        rowsBeforeLimit_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_Stats_descriptor;
      }

      public ClickhouseGrpc.Stats getDefaultInstanceForType() {
        return ClickhouseGrpc.Stats.getDefaultInstance();
      }

      public ClickhouseGrpc.Stats build() {
        ClickhouseGrpc.Stats result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ClickhouseGrpc.Stats buildPartial() {
        ClickhouseGrpc.Stats result = new ClickhouseGrpc.Stats(this);
        result.rows_ = rows_;
        result.blocks_ = blocks_;
        result.allocatedBytes_ = allocatedBytes_;
        result.appliedLimit_ = appliedLimit_;
        result.rowsBeforeLimit_ = rowsBeforeLimit_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ClickhouseGrpc.Stats) {
          return mergeFrom((ClickhouseGrpc.Stats)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ClickhouseGrpc.Stats other) {
        if (other == ClickhouseGrpc.Stats.getDefaultInstance()) return this;
        if (other.getRows() != 0L) {
          setRows(other.getRows());
        }
        if (other.getBlocks() != 0L) {
          setBlocks(other.getBlocks());
        }
        if (other.getAllocatedBytes() != 0L) {
          setAllocatedBytes(other.getAllocatedBytes());
        }
        if (other.getAppliedLimit() != false) {
          setAppliedLimit(other.getAppliedLimit());
        }
        if (other.getRowsBeforeLimit() != 0L) {
          setRowsBeforeLimit(other.getRowsBeforeLimit());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ClickhouseGrpc.Stats parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ClickhouseGrpc.Stats) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long rows_ ;
      /**
       * <code>uint64 rows = 1;</code>
       */
      public long getRows() {
        return rows_;
      }
      /**
       * <code>uint64 rows = 1;</code>
       */
      public Builder setRows(long value) {

        rows_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 rows = 1;</code>
       */
      public Builder clearRows() {

        rows_ = 0L;
        onChanged();
        return this;
      }

      private long blocks_ ;
      /**
       * <code>uint64 blocks = 2;</code>
       */
      public long getBlocks() {
        return blocks_;
      }
      /**
       * <code>uint64 blocks = 2;</code>
       */
      public Builder setBlocks(long value) {

        blocks_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 blocks = 2;</code>
       */
      public Builder clearBlocks() {

        blocks_ = 0L;
        onChanged();
        return this;
      }

      private long allocatedBytes_ ;
      /**
       * <code>uint64 allocated_bytes = 3;</code>
       */
      public long getAllocatedBytes() {
        return allocatedBytes_;
      }
      /**
       * <code>uint64 allocated_bytes = 3;</code>
       */
      public Builder setAllocatedBytes(long value) {

        allocatedBytes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 allocated_bytes = 3;</code>
       */
      public Builder clearAllocatedBytes() {

        allocatedBytes_ = 0L;
        onChanged();
        return this;
      }

      private boolean appliedLimit_ ;
      /**
       * <code>bool applied_limit = 4;</code>
       */
      public boolean getAppliedLimit() {
        return appliedLimit_;
      }
      /**
       * <code>bool applied_limit = 4;</code>
       */
      public Builder setAppliedLimit(boolean value) {

        appliedLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool applied_limit = 4;</code>
       */
      public Builder clearAppliedLimit() {

        appliedLimit_ = false;
        onChanged();
        return this;
      }

      private long rowsBeforeLimit_ ;
      /**
       * <code>uint64 rows_before_limit = 5;</code>
       */
      public long getRowsBeforeLimit() {
        return rowsBeforeLimit_;
      }
      /**
       * <code>uint64 rows_before_limit = 5;</code>
       */
      public Builder setRowsBeforeLimit(long value) {

        rowsBeforeLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 rows_before_limit = 5;</code>
       */
      public Builder clearRowsBeforeLimit() {

        rowsBeforeLimit_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clickhouse.grpc.Stats)
    }

    // @@protoc_insertion_point(class_scope:clickhouse.grpc.Stats)
    private static final ClickhouseGrpc.Stats DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ClickhouseGrpc.Stats();
    }

    public static ClickhouseGrpc.Stats getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Stats>
        PARSER = new com.google.protobuf.AbstractParser<Stats>() {
      public Stats parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Stats(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Stats> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Stats> getParserForType() {
      return PARSER;
    }

    public ClickhouseGrpc.Stats getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExceptionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clickhouse.grpc.Exception)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 code = 1;</code>
     */
    int getCode();

    /**
     * <code>string name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <code>string name = 2;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>string display_text = 3;</code>
     */
    java.lang.String getDisplayText();
    /**
     * <code>string display_text = 3;</code>
     */
    com.google.protobuf.ByteString
        getDisplayTextBytes();

    /**
     * <code>string stack_trace = 4;</code>
     */
    java.lang.String getStackTrace();
    /**
     * <code>string stack_trace = 4;</code>
     */
    com.google.protobuf.ByteString
        getStackTraceBytes();
  }
  /**
   * Protobuf type {@code clickhouse.grpc.Exception}
   */
  public  static final class Exception extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clickhouse.grpc.Exception)
      ExceptionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Exception.newBuilder() to construct.
    private Exception(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Exception() {
      code_ = 0;
      name_ = "";
      displayText_ = "";
      stackTrace_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Exception(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              code_ = input.readInt32();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              displayText_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              stackTrace_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_Exception_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_Exception_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ClickhouseGrpc.Exception.class, ClickhouseGrpc.Exception.Builder.class);
    }

    public static final int CODE_FIELD_NUMBER = 1;
    private int code_;
    /**
     * <code>int32 code = 1;</code>
     */
    public int getCode() {
      return code_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object name_;
    /**
     * <code>string name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <code>string name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DISPLAY_TEXT_FIELD_NUMBER = 3;
    private volatile java.lang.Object displayText_;
    /**
     * <code>string display_text = 3;</code>
     */
    public java.lang.String getDisplayText() {
      java.lang.Object ref = displayText_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        displayText_ = s;
        return s;
      }
    }
    /**
     * <code>string display_text = 3;</code>
     */
    public com.google.protobuf.ByteString
        getDisplayTextBytes() {
      java.lang.Object ref = displayText_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        displayText_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STACK_TRACE_FIELD_NUMBER = 4;
    private volatile java.lang.Object stackTrace_;
    /**
     * <code>string stack_trace = 4;</code>
     */
    public java.lang.String getStackTrace() {
      java.lang.Object ref = stackTrace_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stackTrace_ = s;
        return s;
      }
    }
    /**
     * <code>string stack_trace = 4;</code>
     */
    public com.google.protobuf.ByteString
        getStackTraceBytes() {
      java.lang.Object ref = stackTrace_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stackTrace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (code_ != 0) {
        output.writeInt32(1, code_);
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      if (!getDisplayTextBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, displayText_);
      }
      if (!getStackTraceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, stackTrace_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (code_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, code_);
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      if (!getDisplayTextBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, displayText_);
      }
      if (!getStackTraceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, stackTrace_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ClickhouseGrpc.Exception)) {
        return super.equals(obj);
      }
      ClickhouseGrpc.Exception other = (ClickhouseGrpc.Exception) obj;

      boolean result = true;
      result = result && (getCode()
          == other.getCode());
      result = result && getName()
          .equals(other.getName());
      result = result && getDisplayText()
          .equals(other.getDisplayText());
      result = result && getStackTrace()
          .equals(other.getStackTrace());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CODE_FIELD_NUMBER;
      hash = (53 * hash) + getCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + DISPLAY_TEXT_FIELD_NUMBER;
      hash = (53 * hash) + getDisplayText().hashCode();
      hash = (37 * hash) + STACK_TRACE_FIELD_NUMBER;
      hash = (53 * hash) + getStackTrace().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ClickhouseGrpc.Exception parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.Exception parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.Exception parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.Exception parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.Exception parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.Exception parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.Exception parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.Exception parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.Exception parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.Exception parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.Exception parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.Exception parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ClickhouseGrpc.Exception prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code clickhouse.grpc.Exception}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clickhouse.grpc.Exception)
        ClickhouseGrpc.ExceptionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_Exception_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_Exception_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ClickhouseGrpc.Exception.class, ClickhouseGrpc.Exception.Builder.class);
      }

      // Construct using clickhouse.grpc.ClickhouseGrpc.Exception.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        code_ = 0;

        name_ = "";

        displayText_ = "";

        stackTrace_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_Exception_descriptor;
      }

      public ClickhouseGrpc.Exception getDefaultInstanceForType() {
        return ClickhouseGrpc.Exception.getDefaultInstance();
      }

      public ClickhouseGrpc.Exception build() {
        ClickhouseGrpc.Exception result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ClickhouseGrpc.Exception buildPartial() {
        ClickhouseGrpc.Exception result = new ClickhouseGrpc.Exception(this);
        result.code_ = code_;
        result.name_ = name_;
        result.displayText_ = displayText_;
        result.stackTrace_ = stackTrace_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ClickhouseGrpc.Exception) {
          return mergeFrom((ClickhouseGrpc.Exception)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ClickhouseGrpc.Exception other) {
        if (other == ClickhouseGrpc.Exception.getDefaultInstance()) return this;
        if (other.getCode() != 0) {
          setCode(other.getCode());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getDisplayText().isEmpty()) {
          displayText_ = other.displayText_;
          onChanged();
        }
        if (!other.getStackTrace().isEmpty()) {
          stackTrace_ = other.stackTrace_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ClickhouseGrpc.Exception parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ClickhouseGrpc.Exception) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int code_ ;
      /**
       * <code>int32 code = 1;</code>
       */
      public int getCode() {
        return code_;
      }
      /**
       * <code>int32 code = 1;</code>
       */
      public Builder setCode(int value) {

        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 code = 1;</code>
       */
      public Builder clearCode() {

        code_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>string name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string name = 2;</code>
       */
      public Builder clearName() {

        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>string name = 2;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object displayText_ = "";
      /**
       * <code>string display_text = 3;</code>
       */
      public java.lang.String getDisplayText() {
        java.lang.Object ref = displayText_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          displayText_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string display_text = 3;</code>
       */
      public com.google.protobuf.ByteString
          getDisplayTextBytes() {
        java.lang.Object ref = displayText_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          displayText_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string display_text = 3;</code>
       */
      public Builder setDisplayText(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        displayText_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string display_text = 3;</code>
       */
      public Builder clearDisplayText() {

        displayText_ = getDefaultInstance().getDisplayText();
        onChanged();
        return this;
      }
      /**
       * <code>string display_text = 3;</code>
       */
      public Builder setDisplayTextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        displayText_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object stackTrace_ = "";
      /**
       * <code>string stack_trace = 4;</code>
       */
      public java.lang.String getStackTrace() {
        java.lang.Object ref = stackTrace_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stackTrace_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string stack_trace = 4;</code>
       */
      public com.google.protobuf.ByteString
          getStackTraceBytes() {
        java.lang.Object ref = stackTrace_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stackTrace_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string stack_trace = 4;</code>
       */
      public Builder setStackTrace(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        stackTrace_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string stack_trace = 4;</code>
       */
      public Builder clearStackTrace() {

        stackTrace_ = getDefaultInstance().getStackTrace();
        onChanged();
        return this;
      }
      /**
       * <code>string stack_trace = 4;</code>
       */
      public Builder setStackTraceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        stackTrace_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clickhouse.grpc.Exception)
    }

    // @@protoc_insertion_point(class_scope:clickhouse.grpc.Exception)
    private static final ClickhouseGrpc.Exception DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ClickhouseGrpc.Exception();
    }

    public static ClickhouseGrpc.Exception getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Exception>
        PARSER = new com.google.protobuf.AbstractParser<Exception>() {
      public Exception parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Exception(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Exception> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Exception> getParserForType() {
      return PARSER;
    }

    public ClickhouseGrpc.Exception getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clickhouse.grpc.Result)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string query_id = 9;</code>
     */
    java.lang.String getQueryId();
    /**
     * <code>string query_id = 9;</code>
     */
    com.google.protobuf.ByteString
        getQueryIdBytes();

    /**
     * <code>string time_zone = 10;</code>
     */
    java.lang.String getTimeZone();
    /**
     * <code>string time_zone = 10;</code>
     */
    com.google.protobuf.ByteString
        getTimeZoneBytes();

    /**
     * <pre>
     * The format in which `output`, `totals` and `extremes` are written.
     * It's either the same as `output_format` specified in `QueryInfo` or the format specified in the query itself.
     * </pre>
     *
     * <code>string output_format = 11;</code>
     */
    java.lang.String getOutputFormat();
    /**
     * <pre>
     * The format in which `output`, `totals` and `extremes` are written.
     * It's either the same as `output_format` specified in `QueryInfo` or the format specified in the query itself.
     * </pre>
     *
     * <code>string output_format = 11;</code>
     */
    com.google.protobuf.ByteString
        getOutputFormatBytes();

    /**
     * <pre>
     * The names and types of columns of the result written in `output`.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
     */
    java.util.List<ClickhouseGrpc.NameAndType>
        getOutputColumnsList();
    /**
     * <pre>
     * The names and types of columns of the result written in `output`.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
     */
    ClickhouseGrpc.NameAndType getOutputColumns(int index);
    /**
     * <pre>
     * The names and types of columns of the result written in `output`.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
     */
    int getOutputColumnsCount();
    /**
     * <pre>
     * The names and types of columns of the result written in `output`.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
     */
    java.util.List<? extends ClickhouseGrpc.NameAndTypeOrBuilder>
        getOutputColumnsOrBuilderList();
    /**
     * <pre>
     * The names and types of columns of the result written in `output`.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
     */
    ClickhouseGrpc.NameAndTypeOrBuilder getOutputColumnsOrBuilder(
        int index);

    /**
     * <pre>
     * Output of the query, represented in the `output_format`.
     * </pre>
     *
     * <code>bytes output = 1;</code>
     */
    com.google.protobuf.ByteString getOutput();

    /**
     * <code>bytes totals = 2;</code>
     */
    com.google.protobuf.ByteString getTotals();

    /**
     * <code>bytes extremes = 3;</code>
     */
    com.google.protobuf.ByteString getExtremes();

    /**
     * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
     */
    java.util.List<ClickhouseGrpc.LogEntry>
        getLogsList();
    /**
     * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
     */
    ClickhouseGrpc.LogEntry getLogs(int index);
    /**
     * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
     */
    int getLogsCount();
    /**
     * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
     */
    java.util.List<? extends ClickhouseGrpc.LogEntryOrBuilder>
        getLogsOrBuilderList();
    /**
     * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
     */
    ClickhouseGrpc.LogEntryOrBuilder getLogsOrBuilder(
        int index);

    /**
     * <code>.clickhouse.grpc.Progress progress = 5;</code>
     */
    boolean hasProgress();
    /**
     * <code>.clickhouse.grpc.Progress progress = 5;</code>
     */
    ClickhouseGrpc.Progress getProgress();
    /**
     * <code>.clickhouse.grpc.Progress progress = 5;</code>
     */
    ClickhouseGrpc.ProgressOrBuilder getProgressOrBuilder();

    /**
     * <code>.clickhouse.grpc.Stats stats = 6;</code>
     */
    boolean hasStats();
    /**
     * <code>.clickhouse.grpc.Stats stats = 6;</code>
     */
    ClickhouseGrpc.Stats getStats();
    /**
     * <code>.clickhouse.grpc.Stats stats = 6;</code>
     */
    ClickhouseGrpc.StatsOrBuilder getStatsOrBuilder();

    /**
     * <pre>
     * Set by the ClickHouse server if there was an exception thrown while executing.
     * </pre>
     *
     * <code>.clickhouse.grpc.Exception exception = 7;</code>
     */
    boolean hasException();
    /**
     * <pre>
     * Set by the ClickHouse server if there was an exception thrown while executing.
     * </pre>
     *
     * <code>.clickhouse.grpc.Exception exception = 7;</code>
     */
    ClickhouseGrpc.Exception getException();
    /**
     * <pre>
     * Set by the ClickHouse server if there was an exception thrown while executing.
     * </pre>
     *
     * <code>.clickhouse.grpc.Exception exception = 7;</code>
     */
    ClickhouseGrpc.ExceptionOrBuilder getExceptionOrBuilder();

    /**
     * <pre>
     * Set by the ClickHouse server if executing was cancelled by the `cancel` field in QueryInfo.
     * </pre>
     *
     * <code>bool cancelled = 8;</code>
     */
    boolean getCancelled();
  }
  /**
   * <pre>
   * Result of execution of a query which is sent back by the ClickHouse server to the client.
   * </pre>
   *
   * Protobuf type {@code clickhouse.grpc.Result}
   */
  public  static final class Result extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clickhouse.grpc.Result)
      ResultOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Result.newBuilder() to construct.
    private Result(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Result() {
      queryId_ = "";
      timeZone_ = "";
      outputFormat_ = "";
      outputColumns_ = java.util.Collections.emptyList();
      output_ = com.google.protobuf.ByteString.EMPTY;
      totals_ = com.google.protobuf.ByteString.EMPTY;
      extremes_ = com.google.protobuf.ByteString.EMPTY;
      logs_ = java.util.Collections.emptyList();
      cancelled_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Result(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {

              output_ = input.readBytes();
              break;
            }
            case 18: {

              totals_ = input.readBytes();
              break;
            }
            case 26: {

              extremes_ = input.readBytes();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                logs_ = new java.util.ArrayList<ClickhouseGrpc.LogEntry>();
                mutable_bitField0_ |= 0x00000080;
              }
              logs_.add(
                  input.readMessage(ClickhouseGrpc.LogEntry.parser(), extensionRegistry));
              break;
            }
            case 42: {
              ClickhouseGrpc.Progress.Builder subBuilder = null;
              if (progress_ != null) {
                subBuilder = progress_.toBuilder();
              }
              progress_ = input.readMessage(ClickhouseGrpc.Progress.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(progress_);
                progress_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              ClickhouseGrpc.Stats.Builder subBuilder = null;
              if (stats_ != null) {
                subBuilder = stats_.toBuilder();
              }
              stats_ = input.readMessage(ClickhouseGrpc.Stats.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stats_);
                stats_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              ClickhouseGrpc.Exception.Builder subBuilder = null;
              if (exception_ != null) {
                subBuilder = exception_.toBuilder();
              }
              exception_ = input.readMessage(ClickhouseGrpc.Exception.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(exception_);
                exception_ = subBuilder.buildPartial();
              }

              break;
            }
            case 64: {

              cancelled_ = input.readBool();
              break;
            }
            case 74: {
              java.lang.String s = input.readStringRequireUtf8();

              queryId_ = s;
              break;
            }
            case 82: {
              java.lang.String s = input.readStringRequireUtf8();

              timeZone_ = s;
              break;
            }
            case 90: {
              java.lang.String s = input.readStringRequireUtf8();

              outputFormat_ = s;
              break;
            }
            case 98: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                outputColumns_ = new java.util.ArrayList<ClickhouseGrpc.NameAndType>();
                mutable_bitField0_ |= 0x00000008;
              }
              outputColumns_.add(
                  input.readMessage(ClickhouseGrpc.NameAndType.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          logs_ = java.util.Collections.unmodifiableList(logs_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          outputColumns_ = java.util.Collections.unmodifiableList(outputColumns_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_Result_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ClickhouseGrpc.internal_static_clickhouse_grpc_Result_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ClickhouseGrpc.Result.class, ClickhouseGrpc.Result.Builder.class);
    }

    private int bitField0_;
    public static final int QUERY_ID_FIELD_NUMBER = 9;
    private volatile java.lang.Object queryId_;
    /**
     * <code>string query_id = 9;</code>
     */
    public java.lang.String getQueryId() {
      java.lang.Object ref = queryId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        queryId_ = s;
        return s;
      }
    }
    /**
     * <code>string query_id = 9;</code>
     */
    public com.google.protobuf.ByteString
        getQueryIdBytes() {
      java.lang.Object ref = queryId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        queryId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TIME_ZONE_FIELD_NUMBER = 10;
    private volatile java.lang.Object timeZone_;
    /**
     * <code>string time_zone = 10;</code>
     */
    public java.lang.String getTimeZone() {
      java.lang.Object ref = timeZone_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        timeZone_ = s;
        return s;
      }
    }
    /**
     * <code>string time_zone = 10;</code>
     */
    public com.google.protobuf.ByteString
        getTimeZoneBytes() {
      java.lang.Object ref = timeZone_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        timeZone_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OUTPUT_FORMAT_FIELD_NUMBER = 11;
    private volatile java.lang.Object outputFormat_;
    /**
     * <pre>
     * The format in which `output`, `totals` and `extremes` are written.
     * It's either the same as `output_format` specified in `QueryInfo` or the format specified in the query itself.
     * </pre>
     *
     * <code>string output_format = 11;</code>
     */
    public java.lang.String getOutputFormat() {
      java.lang.Object ref = outputFormat_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        outputFormat_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The format in which `output`, `totals` and `extremes` are written.
     * It's either the same as `output_format` specified in `QueryInfo` or the format specified in the query itself.
     * </pre>
     *
     * <code>string output_format = 11;</code>
     */
    public com.google.protobuf.ByteString
        getOutputFormatBytes() {
      java.lang.Object ref = outputFormat_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        outputFormat_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OUTPUT_COLUMNS_FIELD_NUMBER = 12;
    private java.util.List<ClickhouseGrpc.NameAndType> outputColumns_;
    /**
     * <pre>
     * The names and types of columns of the result written in `output`.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
     */
    public java.util.List<ClickhouseGrpc.NameAndType> getOutputColumnsList() {
      return outputColumns_;
    }
    /**
     * <pre>
     * The names and types of columns of the result written in `output`.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
     */
    public java.util.List<? extends ClickhouseGrpc.NameAndTypeOrBuilder>
        getOutputColumnsOrBuilderList() {
      return outputColumns_;
    }
    /**
     * <pre>
     * The names and types of columns of the result written in `output`.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
     */
    public int getOutputColumnsCount() {
      return outputColumns_.size();
    }
    /**
     * <pre>
     * The names and types of columns of the result written in `output`.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
     */
    public ClickhouseGrpc.NameAndType getOutputColumns(int index) {
      return outputColumns_.get(index);
    }
    /**
     * <pre>
     * The names and types of columns of the result written in `output`.
     * </pre>
     *
     * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
     */
    public ClickhouseGrpc.NameAndTypeOrBuilder getOutputColumnsOrBuilder(
        int index) {
      return outputColumns_.get(index);
    }

    public static final int OUTPUT_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString output_;
    /**
     * <pre>
     * Output of the query, represented in the `output_format`.
     * </pre>
     *
     * <code>bytes output = 1;</code>
     */
    public com.google.protobuf.ByteString getOutput() {
      return output_;
    }

    public static final int TOTALS_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString totals_;
    /**
     * <code>bytes totals = 2;</code>
     */
    public com.google.protobuf.ByteString getTotals() {
      return totals_;
    }

    public static final int EXTREMES_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString extremes_;
    /**
     * <code>bytes extremes = 3;</code>
     */
    public com.google.protobuf.ByteString getExtremes() {
      return extremes_;
    }

    public static final int LOGS_FIELD_NUMBER = 4;
    private java.util.List<ClickhouseGrpc.LogEntry> logs_;
    /**
     * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
     */
    public java.util.List<ClickhouseGrpc.LogEntry> getLogsList() {
      return logs_;
    }
    /**
     * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
     */
    public java.util.List<? extends ClickhouseGrpc.LogEntryOrBuilder>
        getLogsOrBuilderList() {
      return logs_;
    }
    /**
     * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
     */
    public int getLogsCount() {
      return logs_.size();
    }
    /**
     * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
     */
    public ClickhouseGrpc.LogEntry getLogs(int index) {
      return logs_.get(index);
    }
    /**
     * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
     */
    public ClickhouseGrpc.LogEntryOrBuilder getLogsOrBuilder(
        int index) {
      return logs_.get(index);
    }

    public static final int PROGRESS_FIELD_NUMBER = 5;
    private ClickhouseGrpc.Progress progress_;
    /**
     * <code>.clickhouse.grpc.Progress progress = 5;</code>
     */
    public boolean hasProgress() {
      return progress_ != null;
    }
    /**
     * <code>.clickhouse.grpc.Progress progress = 5;</code>
     */
    public ClickhouseGrpc.Progress getProgress() {
      return progress_ == null ? ClickhouseGrpc.Progress.getDefaultInstance() : progress_;
    }
    /**
     * <code>.clickhouse.grpc.Progress progress = 5;</code>
     */
    public ClickhouseGrpc.ProgressOrBuilder getProgressOrBuilder() {
      return getProgress();
    }

    public static final int STATS_FIELD_NUMBER = 6;
    private ClickhouseGrpc.Stats stats_;
    /**
     * <code>.clickhouse.grpc.Stats stats = 6;</code>
     */
    public boolean hasStats() {
      return stats_ != null;
    }
    /**
     * <code>.clickhouse.grpc.Stats stats = 6;</code>
     */
    public ClickhouseGrpc.Stats getStats() {
      return stats_ == null ? ClickhouseGrpc.Stats.getDefaultInstance() : stats_;
    }
    /**
     * <code>.clickhouse.grpc.Stats stats = 6;</code>
     */
    public ClickhouseGrpc.StatsOrBuilder getStatsOrBuilder() {
      return getStats();
    }

    public static final int EXCEPTION_FIELD_NUMBER = 7;
    private ClickhouseGrpc.Exception exception_;
    /**
     * <pre>
     * Set by the ClickHouse server if there was an exception thrown while executing.
     * </pre>
     *
     * <code>.clickhouse.grpc.Exception exception = 7;</code>
     */
    public boolean hasException() {
      return exception_ != null;
    }
    /**
     * <pre>
     * Set by the ClickHouse server if there was an exception thrown while executing.
     * </pre>
     *
     * <code>.clickhouse.grpc.Exception exception = 7;</code>
     */
    public ClickhouseGrpc.Exception getException() {
      return exception_ == null ? ClickhouseGrpc.Exception.getDefaultInstance() : exception_;
    }
    /**
     * <pre>
     * Set by the ClickHouse server if there was an exception thrown while executing.
     * </pre>
     *
     * <code>.clickhouse.grpc.Exception exception = 7;</code>
     */
    public ClickhouseGrpc.ExceptionOrBuilder getExceptionOrBuilder() {
      return getException();
    }

    public static final int CANCELLED_FIELD_NUMBER = 8;
    private boolean cancelled_;
    /**
     * <pre>
     * Set by the ClickHouse server if executing was cancelled by the `cancel` field in QueryInfo.
     * </pre>
     *
     * <code>bool cancelled = 8;</code>
     */
    public boolean getCancelled() {
      return cancelled_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!output_.isEmpty()) {
        output.writeBytes(1, output_);
      }
      if (!totals_.isEmpty()) {
        output.writeBytes(2, totals_);
      }
      if (!extremes_.isEmpty()) {
        output.writeBytes(3, extremes_);
      }
      for (int i = 0; i < logs_.size(); i++) {
        output.writeMessage(4, logs_.get(i));
      }
      if (progress_ != null) {
        output.writeMessage(5, getProgress());
      }
      if (stats_ != null) {
        output.writeMessage(6, getStats());
      }
      if (exception_ != null) {
        output.writeMessage(7, getException());
      }
      if (cancelled_ != false) {
        output.writeBool(8, cancelled_);
      }
      if (!getQueryIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 9, queryId_);
      }
      if (!getTimeZoneBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 10, timeZone_);
      }
      if (!getOutputFormatBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 11, outputFormat_);
      }
      for (int i = 0; i < outputColumns_.size(); i++) {
        output.writeMessage(12, outputColumns_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!output_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, output_);
      }
      if (!totals_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, totals_);
      }
      if (!extremes_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, extremes_);
      }
      for (int i = 0; i < logs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, logs_.get(i));
      }
      if (progress_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getProgress());
      }
      if (stats_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getStats());
      }
      if (exception_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getException());
      }
      if (cancelled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, cancelled_);
      }
      if (!getQueryIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, queryId_);
      }
      if (!getTimeZoneBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, timeZone_);
      }
      if (!getOutputFormatBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(11, outputFormat_);
      }
      for (int i = 0; i < outputColumns_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, outputColumns_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ClickhouseGrpc.Result)) {
        return super.equals(obj);
      }
      ClickhouseGrpc.Result other = (ClickhouseGrpc.Result) obj;

      boolean result = true;
      result = result && getQueryId()
          .equals(other.getQueryId());
      result = result && getTimeZone()
          .equals(other.getTimeZone());
      result = result && getOutputFormat()
          .equals(other.getOutputFormat());
      result = result && getOutputColumnsList()
          .equals(other.getOutputColumnsList());
      result = result && getOutput()
          .equals(other.getOutput());
      result = result && getTotals()
          .equals(other.getTotals());
      result = result && getExtremes()
          .equals(other.getExtremes());
      result = result && getLogsList()
          .equals(other.getLogsList());
      result = result && (hasProgress() == other.hasProgress());
      if (hasProgress()) {
        result = result && getProgress()
            .equals(other.getProgress());
      }
      result = result && (hasStats() == other.hasStats());
      if (hasStats()) {
        result = result && getStats()
            .equals(other.getStats());
      }
      result = result && (hasException() == other.hasException());
      if (hasException()) {
        result = result && getException()
            .equals(other.getException());
      }
      result = result && (getCancelled()
          == other.getCancelled());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + QUERY_ID_FIELD_NUMBER;
      hash = (53 * hash) + getQueryId().hashCode();
      hash = (37 * hash) + TIME_ZONE_FIELD_NUMBER;
      hash = (53 * hash) + getTimeZone().hashCode();
      hash = (37 * hash) + OUTPUT_FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + getOutputFormat().hashCode();
      if (getOutputColumnsCount() > 0) {
        hash = (37 * hash) + OUTPUT_COLUMNS_FIELD_NUMBER;
        hash = (53 * hash) + getOutputColumnsList().hashCode();
      }
      hash = (37 * hash) + OUTPUT_FIELD_NUMBER;
      hash = (53 * hash) + getOutput().hashCode();
      hash = (37 * hash) + TOTALS_FIELD_NUMBER;
      hash = (53 * hash) + getTotals().hashCode();
      hash = (37 * hash) + EXTREMES_FIELD_NUMBER;
      hash = (53 * hash) + getExtremes().hashCode();
      if (getLogsCount() > 0) {
        hash = (37 * hash) + LOGS_FIELD_NUMBER;
        hash = (53 * hash) + getLogsList().hashCode();
      }
      if (hasProgress()) {
        hash = (37 * hash) + PROGRESS_FIELD_NUMBER;
        hash = (53 * hash) + getProgress().hashCode();
      }
      if (hasStats()) {
        hash = (37 * hash) + STATS_FIELD_NUMBER;
        hash = (53 * hash) + getStats().hashCode();
      }
      if (hasException()) {
        hash = (37 * hash) + EXCEPTION_FIELD_NUMBER;
        hash = (53 * hash) + getException().hashCode();
      }
      hash = (37 * hash) + CANCELLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getCancelled());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ClickhouseGrpc.Result parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.Result parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.Result parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.Result parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.Result parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ClickhouseGrpc.Result parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ClickhouseGrpc.Result parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.Result parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.Result parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.Result parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ClickhouseGrpc.Result parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ClickhouseGrpc.Result parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ClickhouseGrpc.Result prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Result of execution of a query which is sent back by the ClickHouse server to the client.
     * </pre>
     *
     * Protobuf type {@code clickhouse.grpc.Result}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clickhouse.grpc.Result)
        ClickhouseGrpc.ResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_Result_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_Result_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ClickhouseGrpc.Result.class, ClickhouseGrpc.Result.Builder.class);
      }

      // Construct using clickhouse.grpc.ClickhouseGrpc.Result.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getOutputColumnsFieldBuilder();
          getLogsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        queryId_ = "";

        timeZone_ = "";

        outputFormat_ = "";

        if (outputColumnsBuilder_ == null) {
          outputColumns_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          outputColumnsBuilder_.clear();
        }
        output_ = com.google.protobuf.ByteString.EMPTY;

        totals_ = com.google.protobuf.ByteString.EMPTY;

        extremes_ = com.google.protobuf.ByteString.EMPTY;

        if (logsBuilder_ == null) {
          logs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          logsBuilder_.clear();
        }
        if (progressBuilder_ == null) {
          progress_ = null;
        } else {
          progress_ = null;
          progressBuilder_ = null;
        }
        if (statsBuilder_ == null) {
          stats_ = null;
        } else {
          stats_ = null;
          statsBuilder_ = null;
        }
        if (exceptionBuilder_ == null) {
          exception_ = null;
        } else {
          exception_ = null;
          exceptionBuilder_ = null;
        }
        cancelled_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ClickhouseGrpc.internal_static_clickhouse_grpc_Result_descriptor;
      }

      public ClickhouseGrpc.Result getDefaultInstanceForType() {
        return ClickhouseGrpc.Result.getDefaultInstance();
      }

      public ClickhouseGrpc.Result build() {
        ClickhouseGrpc.Result result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ClickhouseGrpc.Result buildPartial() {
        ClickhouseGrpc.Result result = new ClickhouseGrpc.Result(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.queryId_ = queryId_;
        result.timeZone_ = timeZone_;
        result.outputFormat_ = outputFormat_;
        if (outputColumnsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            outputColumns_ = java.util.Collections.unmodifiableList(outputColumns_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.outputColumns_ = outputColumns_;
        } else {
          result.outputColumns_ = outputColumnsBuilder_.build();
        }
        result.output_ = output_;
        result.totals_ = totals_;
        result.extremes_ = extremes_;
        if (logsBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            logs_ = java.util.Collections.unmodifiableList(logs_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.logs_ = logs_;
        } else {
          result.logs_ = logsBuilder_.build();
        }
        if (progressBuilder_ == null) {
          result.progress_ = progress_;
        } else {
          result.progress_ = progressBuilder_.build();
        }
        if (statsBuilder_ == null) {
          result.stats_ = stats_;
        } else {
          result.stats_ = statsBuilder_.build();
        }
        if (exceptionBuilder_ == null) {
          result.exception_ = exception_;
        } else {
          result.exception_ = exceptionBuilder_.build();
        }
        result.cancelled_ = cancelled_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ClickhouseGrpc.Result) {
          return mergeFrom((ClickhouseGrpc.Result)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ClickhouseGrpc.Result other) {
        if (other == ClickhouseGrpc.Result.getDefaultInstance()) return this;
        if (!other.getQueryId().isEmpty()) {
          queryId_ = other.queryId_;
          onChanged();
        }
        if (!other.getTimeZone().isEmpty()) {
          timeZone_ = other.timeZone_;
          onChanged();
        }
        if (!other.getOutputFormat().isEmpty()) {
          outputFormat_ = other.outputFormat_;
          onChanged();
        }
        if (outputColumnsBuilder_ == null) {
          if (!other.outputColumns_.isEmpty()) {
            if (outputColumns_.isEmpty()) {
              outputColumns_ = other.outputColumns_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureOutputColumnsIsMutable();
              outputColumns_.addAll(other.outputColumns_);
            }
            onChanged();
          }
        } else {
          if (!other.outputColumns_.isEmpty()) {
            if (outputColumnsBuilder_.isEmpty()) {
              outputColumnsBuilder_.dispose();
              outputColumnsBuilder_ = null;
              outputColumns_ = other.outputColumns_;
              bitField0_ = (bitField0_ & ~0x00000008);
              outputColumnsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getOutputColumnsFieldBuilder() : null;
            } else {
              outputColumnsBuilder_.addAllMessages(other.outputColumns_);
            }
          }
        }
        if (other.getOutput() != com.google.protobuf.ByteString.EMPTY) {
          setOutput(other.getOutput());
        }
        if (other.getTotals() != com.google.protobuf.ByteString.EMPTY) {
          setTotals(other.getTotals());
        }
        if (other.getExtremes() != com.google.protobuf.ByteString.EMPTY) {
          setExtremes(other.getExtremes());
        }
        if (logsBuilder_ == null) {
          if (!other.logs_.isEmpty()) {
            if (logs_.isEmpty()) {
              logs_ = other.logs_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureLogsIsMutable();
              logs_.addAll(other.logs_);
            }
            onChanged();
          }
        } else {
          if (!other.logs_.isEmpty()) {
            if (logsBuilder_.isEmpty()) {
              logsBuilder_.dispose();
              logsBuilder_ = null;
              logs_ = other.logs_;
              bitField0_ = (bitField0_ & ~0x00000080);
              logsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLogsFieldBuilder() : null;
            } else {
              logsBuilder_.addAllMessages(other.logs_);
            }
          }
        }
        if (other.hasProgress()) {
          mergeProgress(other.getProgress());
        }
        if (other.hasStats()) {
          mergeStats(other.getStats());
        }
        if (other.hasException()) {
          mergeException(other.getException());
        }
        if (other.getCancelled() != false) {
          setCancelled(other.getCancelled());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ClickhouseGrpc.Result parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ClickhouseGrpc.Result) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object queryId_ = "";
      /**
       * <code>string query_id = 9;</code>
       */
      public java.lang.String getQueryId() {
        java.lang.Object ref = queryId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          queryId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string query_id = 9;</code>
       */
      public com.google.protobuf.ByteString
          getQueryIdBytes() {
        java.lang.Object ref = queryId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          queryId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string query_id = 9;</code>
       */
      public Builder setQueryId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        queryId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string query_id = 9;</code>
       */
      public Builder clearQueryId() {

        queryId_ = getDefaultInstance().getQueryId();
        onChanged();
        return this;
      }
      /**
       * <code>string query_id = 9;</code>
       */
      public Builder setQueryIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        queryId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object timeZone_ = "";
      /**
       * <code>string time_zone = 10;</code>
       */
      public java.lang.String getTimeZone() {
        java.lang.Object ref = timeZone_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          timeZone_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string time_zone = 10;</code>
       */
      public com.google.protobuf.ByteString
          getTimeZoneBytes() {
        java.lang.Object ref = timeZone_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          timeZone_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string time_zone = 10;</code>
       */
      public Builder setTimeZone(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        timeZone_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string time_zone = 10;</code>
       */
      public Builder clearTimeZone() {

        timeZone_ = getDefaultInstance().getTimeZone();
        onChanged();
        return this;
      }
      /**
       * <code>string time_zone = 10;</code>
       */
      public Builder setTimeZoneBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        timeZone_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object outputFormat_ = "";
      /**
       * <pre>
       * The format in which `output`, `totals` and `extremes` are written.
       * It's either the same as `output_format` specified in `QueryInfo` or the format specified in the query itself.
       * </pre>
       *
       * <code>string output_format = 11;</code>
       */
      public java.lang.String getOutputFormat() {
        java.lang.Object ref = outputFormat_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          outputFormat_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The format in which `output`, `totals` and `extremes` are written.
       * It's either the same as `output_format` specified in `QueryInfo` or the format specified in the query itself.
       * </pre>
       *
       * <code>string output_format = 11;</code>
       */
      public com.google.protobuf.ByteString
          getOutputFormatBytes() {
        java.lang.Object ref = outputFormat_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          outputFormat_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The format in which `output`, `totals` and `extremes` are written.
       * It's either the same as `output_format` specified in `QueryInfo` or the format specified in the query itself.
       * </pre>
       *
       * <code>string output_format = 11;</code>
       */
      public Builder setOutputFormat(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        outputFormat_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The format in which `output`, `totals` and `extremes` are written.
       * It's either the same as `output_format` specified in `QueryInfo` or the format specified in the query itself.
       * </pre>
       *
       * <code>string output_format = 11;</code>
       */
      public Builder clearOutputFormat() {

        outputFormat_ = getDefaultInstance().getOutputFormat();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The format in which `output`, `totals` and `extremes` are written.
       * It's either the same as `output_format` specified in `QueryInfo` or the format specified in the query itself.
       * </pre>
       *
       * <code>string output_format = 11;</code>
       */
      public Builder setOutputFormatBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        outputFormat_ = value;
        onChanged();
        return this;
      }

      private java.util.List<ClickhouseGrpc.NameAndType> outputColumns_ =
        java.util.Collections.emptyList();
      private void ensureOutputColumnsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          outputColumns_ = new java.util.ArrayList<ClickhouseGrpc.NameAndType>(outputColumns_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          ClickhouseGrpc.NameAndType, ClickhouseGrpc.NameAndType.Builder, ClickhouseGrpc.NameAndTypeOrBuilder> outputColumnsBuilder_;

      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public java.util.List<ClickhouseGrpc.NameAndType> getOutputColumnsList() {
        if (outputColumnsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outputColumns_);
        } else {
          return outputColumnsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public int getOutputColumnsCount() {
        if (outputColumnsBuilder_ == null) {
          return outputColumns_.size();
        } else {
          return outputColumnsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public ClickhouseGrpc.NameAndType getOutputColumns(int index) {
        if (outputColumnsBuilder_ == null) {
          return outputColumns_.get(index);
        } else {
          return outputColumnsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public Builder setOutputColumns(
          int index, ClickhouseGrpc.NameAndType value) {
        if (outputColumnsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputColumnsIsMutable();
          outputColumns_.set(index, value);
          onChanged();
        } else {
          outputColumnsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public Builder setOutputColumns(
          int index, ClickhouseGrpc.NameAndType.Builder builderForValue) {
        if (outputColumnsBuilder_ == null) {
          ensureOutputColumnsIsMutable();
          outputColumns_.set(index, builderForValue.build());
          onChanged();
        } else {
          outputColumnsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public Builder addOutputColumns(ClickhouseGrpc.NameAndType value) {
        if (outputColumnsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputColumnsIsMutable();
          outputColumns_.add(value);
          onChanged();
        } else {
          outputColumnsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public Builder addOutputColumns(
          int index, ClickhouseGrpc.NameAndType value) {
        if (outputColumnsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputColumnsIsMutable();
          outputColumns_.add(index, value);
          onChanged();
        } else {
          outputColumnsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public Builder addOutputColumns(
          ClickhouseGrpc.NameAndType.Builder builderForValue) {
        if (outputColumnsBuilder_ == null) {
          ensureOutputColumnsIsMutable();
          outputColumns_.add(builderForValue.build());
          onChanged();
        } else {
          outputColumnsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public Builder addOutputColumns(
          int index, ClickhouseGrpc.NameAndType.Builder builderForValue) {
        if (outputColumnsBuilder_ == null) {
          ensureOutputColumnsIsMutable();
          outputColumns_.add(index, builderForValue.build());
          onChanged();
        } else {
          outputColumnsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public Builder addAllOutputColumns(
          java.lang.Iterable<? extends ClickhouseGrpc.NameAndType> values) {
        if (outputColumnsBuilder_ == null) {
          ensureOutputColumnsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, outputColumns_);
          onChanged();
        } else {
          outputColumnsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public Builder clearOutputColumns() {
        if (outputColumnsBuilder_ == null) {
          outputColumns_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          outputColumnsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public Builder removeOutputColumns(int index) {
        if (outputColumnsBuilder_ == null) {
          ensureOutputColumnsIsMutable();
          outputColumns_.remove(index);
          onChanged();
        } else {
          outputColumnsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public ClickhouseGrpc.NameAndType.Builder getOutputColumnsBuilder(
          int index) {
        return getOutputColumnsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public ClickhouseGrpc.NameAndTypeOrBuilder getOutputColumnsOrBuilder(
          int index) {
        if (outputColumnsBuilder_ == null) {
          return outputColumns_.get(index);  } else {
          return outputColumnsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public java.util.List<? extends ClickhouseGrpc.NameAndTypeOrBuilder>
           getOutputColumnsOrBuilderList() {
        if (outputColumnsBuilder_ != null) {
          return outputColumnsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outputColumns_);
        }
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public ClickhouseGrpc.NameAndType.Builder addOutputColumnsBuilder() {
        return getOutputColumnsFieldBuilder().addBuilder(
            ClickhouseGrpc.NameAndType.getDefaultInstance());
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public ClickhouseGrpc.NameAndType.Builder addOutputColumnsBuilder(
          int index) {
        return getOutputColumnsFieldBuilder().addBuilder(
            index, ClickhouseGrpc.NameAndType.getDefaultInstance());
      }
      /**
       * <pre>
       * The names and types of columns of the result written in `output`.
       * </pre>
       *
       * <code>repeated .clickhouse.grpc.NameAndType output_columns = 12;</code>
       */
      public java.util.List<ClickhouseGrpc.NameAndType.Builder>
           getOutputColumnsBuilderList() {
        return getOutputColumnsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          ClickhouseGrpc.NameAndType, ClickhouseGrpc.NameAndType.Builder, ClickhouseGrpc.NameAndTypeOrBuilder>
          getOutputColumnsFieldBuilder() {
        if (outputColumnsBuilder_ == null) {
          outputColumnsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              ClickhouseGrpc.NameAndType, ClickhouseGrpc.NameAndType.Builder, ClickhouseGrpc.NameAndTypeOrBuilder>(
                  outputColumns_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          outputColumns_ = null;
        }
        return outputColumnsBuilder_;
      }

      private com.google.protobuf.ByteString output_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Output of the query, represented in the `output_format`.
       * </pre>
       *
       * <code>bytes output = 1;</code>
       */
      public com.google.protobuf.ByteString getOutput() {
        return output_;
      }
      /**
       * <pre>
       * Output of the query, represented in the `output_format`.
       * </pre>
       *
       * <code>bytes output = 1;</code>
       */
      public Builder setOutput(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }

        output_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Output of the query, represented in the `output_format`.
       * </pre>
       *
       * <code>bytes output = 1;</code>
       */
      public Builder clearOutput() {

        output_ = getDefaultInstance().getOutput();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString totals_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes totals = 2;</code>
       */
      public com.google.protobuf.ByteString getTotals() {
        return totals_;
      }
      /**
       * <code>bytes totals = 2;</code>
       */
      public Builder setTotals(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }

        totals_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes totals = 2;</code>
       */
      public Builder clearTotals() {

        totals_ = getDefaultInstance().getTotals();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString extremes_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes extremes = 3;</code>
       */
      public com.google.protobuf.ByteString getExtremes() {
        return extremes_;
      }
      /**
       * <code>bytes extremes = 3;</code>
       */
      public Builder setExtremes(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }

        extremes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes extremes = 3;</code>
       */
      public Builder clearExtremes() {

        extremes_ = getDefaultInstance().getExtremes();
        onChanged();
        return this;
      }

      private java.util.List<ClickhouseGrpc.LogEntry> logs_ =
        java.util.Collections.emptyList();
      private void ensureLogsIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          logs_ = new java.util.ArrayList<ClickhouseGrpc.LogEntry>(logs_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          ClickhouseGrpc.LogEntry, ClickhouseGrpc.LogEntry.Builder, ClickhouseGrpc.LogEntryOrBuilder> logsBuilder_;

      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public java.util.List<ClickhouseGrpc.LogEntry> getLogsList() {
        if (logsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(logs_);
        } else {
          return logsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public int getLogsCount() {
        if (logsBuilder_ == null) {
          return logs_.size();
        } else {
          return logsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public ClickhouseGrpc.LogEntry getLogs(int index) {
        if (logsBuilder_ == null) {
          return logs_.get(index);
        } else {
          return logsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public Builder setLogs(
          int index, ClickhouseGrpc.LogEntry value) {
        if (logsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLogsIsMutable();
          logs_.set(index, value);
          onChanged();
        } else {
          logsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public Builder setLogs(
          int index, ClickhouseGrpc.LogEntry.Builder builderForValue) {
        if (logsBuilder_ == null) {
          ensureLogsIsMutable();
          logs_.set(index, builderForValue.build());
          onChanged();
        } else {
          logsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public Builder addLogs(ClickhouseGrpc.LogEntry value) {
        if (logsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLogsIsMutable();
          logs_.add(value);
          onChanged();
        } else {
          logsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public Builder addLogs(
          int index, ClickhouseGrpc.LogEntry value) {
        if (logsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLogsIsMutable();
          logs_.add(index, value);
          onChanged();
        } else {
          logsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public Builder addLogs(
          ClickhouseGrpc.LogEntry.Builder builderForValue) {
        if (logsBuilder_ == null) {
          ensureLogsIsMutable();
          logs_.add(builderForValue.build());
          onChanged();
        } else {
          logsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public Builder addLogs(
          int index, ClickhouseGrpc.LogEntry.Builder builderForValue) {
        if (logsBuilder_ == null) {
          ensureLogsIsMutable();
          logs_.add(index, builderForValue.build());
          onChanged();
        } else {
          logsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public Builder addAllLogs(
          java.lang.Iterable<? extends ClickhouseGrpc.LogEntry> values) {
        if (logsBuilder_ == null) {
          ensureLogsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, logs_);
          onChanged();
        } else {
          logsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public Builder clearLogs() {
        if (logsBuilder_ == null) {
          logs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          logsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public Builder removeLogs(int index) {
        if (logsBuilder_ == null) {
          ensureLogsIsMutable();
          logs_.remove(index);
          onChanged();
        } else {
          logsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public ClickhouseGrpc.LogEntry.Builder getLogsBuilder(
          int index) {
        return getLogsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public ClickhouseGrpc.LogEntryOrBuilder getLogsOrBuilder(
          int index) {
        if (logsBuilder_ == null) {
          return logs_.get(index);  } else {
          return logsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public java.util.List<? extends ClickhouseGrpc.LogEntryOrBuilder>
           getLogsOrBuilderList() {
        if (logsBuilder_ != null) {
          return logsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(logs_);
        }
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public ClickhouseGrpc.LogEntry.Builder addLogsBuilder() {
        return getLogsFieldBuilder().addBuilder(
            ClickhouseGrpc.LogEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public ClickhouseGrpc.LogEntry.Builder addLogsBuilder(
          int index) {
        return getLogsFieldBuilder().addBuilder(
            index, ClickhouseGrpc.LogEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .clickhouse.grpc.LogEntry logs = 4;</code>
       */
      public java.util.List<ClickhouseGrpc.LogEntry.Builder>
           getLogsBuilderList() {
        return getLogsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          ClickhouseGrpc.LogEntry, ClickhouseGrpc.LogEntry.Builder, ClickhouseGrpc.LogEntryOrBuilder>
          getLogsFieldBuilder() {
        if (logsBuilder_ == null) {
          logsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              ClickhouseGrpc.LogEntry, ClickhouseGrpc.LogEntry.Builder, ClickhouseGrpc.LogEntryOrBuilder>(
                  logs_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          logs_ = null;
        }
        return logsBuilder_;
      }

      private ClickhouseGrpc.Progress progress_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          ClickhouseGrpc.Progress, ClickhouseGrpc.Progress.Builder, ClickhouseGrpc.ProgressOrBuilder> progressBuilder_;
      /**
       * <code>.clickhouse.grpc.Progress progress = 5;</code>
       */
      public boolean hasProgress() {
        return progressBuilder_ != null || progress_ != null;
      }
      /**
       * <code>.clickhouse.grpc.Progress progress = 5;</code>
       */
      public ClickhouseGrpc.Progress getProgress() {
        if (progressBuilder_ == null) {
          return progress_ == null ? ClickhouseGrpc.Progress.getDefaultInstance() : progress_;
        } else {
          return progressBuilder_.getMessage();
        }
      }
      /**
       * <code>.clickhouse.grpc.Progress progress = 5;</code>
       */
      public Builder setProgress(ClickhouseGrpc.Progress value) {
        if (progressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          progress_ = value;
          onChanged();
        } else {
          progressBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.clickhouse.grpc.Progress progress = 5;</code>
       */
      public Builder setProgress(
          ClickhouseGrpc.Progress.Builder builderForValue) {
        if (progressBuilder_ == null) {
          progress_ = builderForValue.build();
          onChanged();
        } else {
          progressBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.clickhouse.grpc.Progress progress = 5;</code>
       */
      public Builder mergeProgress(ClickhouseGrpc.Progress value) {
        if (progressBuilder_ == null) {
          if (progress_ != null) {
            progress_ =
              ClickhouseGrpc.Progress.newBuilder(progress_).mergeFrom(value).buildPartial();
          } else {
            progress_ = value;
          }
          onChanged();
        } else {
          progressBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.clickhouse.grpc.Progress progress = 5;</code>
       */
      public Builder clearProgress() {
        if (progressBuilder_ == null) {
          progress_ = null;
          onChanged();
        } else {
          progress_ = null;
          progressBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.clickhouse.grpc.Progress progress = 5;</code>
       */
      public ClickhouseGrpc.Progress.Builder getProgressBuilder() {

        onChanged();
        return getProgressFieldBuilder().getBuilder();
      }
      /**
       * <code>.clickhouse.grpc.Progress progress = 5;</code>
       */
      public ClickhouseGrpc.ProgressOrBuilder getProgressOrBuilder() {
        if (progressBuilder_ != null) {
          return progressBuilder_.getMessageOrBuilder();
        } else {
          return progress_ == null ?
              ClickhouseGrpc.Progress.getDefaultInstance() : progress_;
        }
      }
      /**
       * <code>.clickhouse.grpc.Progress progress = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          ClickhouseGrpc.Progress, ClickhouseGrpc.Progress.Builder, ClickhouseGrpc.ProgressOrBuilder>
          getProgressFieldBuilder() {
        if (progressBuilder_ == null) {
          progressBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              ClickhouseGrpc.Progress, ClickhouseGrpc.Progress.Builder, ClickhouseGrpc.ProgressOrBuilder>(
                  getProgress(),
                  getParentForChildren(),
                  isClean());
          progress_ = null;
        }
        return progressBuilder_;
      }

      private ClickhouseGrpc.Stats stats_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          ClickhouseGrpc.Stats, ClickhouseGrpc.Stats.Builder, ClickhouseGrpc.StatsOrBuilder> statsBuilder_;
      /**
       * <code>.clickhouse.grpc.Stats stats = 6;</code>
       */
      public boolean hasStats() {
        return statsBuilder_ != null || stats_ != null;
      }
      /**
       * <code>.clickhouse.grpc.Stats stats = 6;</code>
       */
      public ClickhouseGrpc.Stats getStats() {
        if (statsBuilder_ == null) {
          return stats_ == null ? ClickhouseGrpc.Stats.getDefaultInstance() : stats_;
        } else {
          return statsBuilder_.getMessage();
        }
      }
      /**
       * <code>.clickhouse.grpc.Stats stats = 6;</code>
       */
      public Builder setStats(ClickhouseGrpc.Stats value) {
        if (statsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stats_ = value;
          onChanged();
        } else {
          statsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.clickhouse.grpc.Stats stats = 6;</code>
       */
      public Builder setStats(
          ClickhouseGrpc.Stats.Builder builderForValue) {
        if (statsBuilder_ == null) {
          stats_ = builderForValue.build();
          onChanged();
        } else {
          statsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.clickhouse.grpc.Stats stats = 6;</code>
       */
      public Builder mergeStats(ClickhouseGrpc.Stats value) {
        if (statsBuilder_ == null) {
          if (stats_ != null) {
            stats_ =
              ClickhouseGrpc.Stats.newBuilder(stats_).mergeFrom(value).buildPartial();
          } else {
            stats_ = value;
          }
          onChanged();
        } else {
          statsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.clickhouse.grpc.Stats stats = 6;</code>
       */
      public Builder clearStats() {
        if (statsBuilder_ == null) {
          stats_ = null;
          onChanged();
        } else {
          stats_ = null;
          statsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.clickhouse.grpc.Stats stats = 6;</code>
       */
      public ClickhouseGrpc.Stats.Builder getStatsBuilder() {

        onChanged();
        return getStatsFieldBuilder().getBuilder();
      }
      /**
       * <code>.clickhouse.grpc.Stats stats = 6;</code>
       */
      public ClickhouseGrpc.StatsOrBuilder getStatsOrBuilder() {
        if (statsBuilder_ != null) {
          return statsBuilder_.getMessageOrBuilder();
        } else {
          return stats_ == null ?
              ClickhouseGrpc.Stats.getDefaultInstance() : stats_;
        }
      }
      /**
       * <code>.clickhouse.grpc.Stats stats = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          ClickhouseGrpc.Stats, ClickhouseGrpc.Stats.Builder, ClickhouseGrpc.StatsOrBuilder>
          getStatsFieldBuilder() {
        if (statsBuilder_ == null) {
          statsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              ClickhouseGrpc.Stats, ClickhouseGrpc.Stats.Builder, ClickhouseGrpc.StatsOrBuilder>(
                  getStats(),
                  getParentForChildren(),
                  isClean());
          stats_ = null;
        }
        return statsBuilder_;
      }

      private ClickhouseGrpc.Exception exception_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          ClickhouseGrpc.Exception, ClickhouseGrpc.Exception.Builder, ClickhouseGrpc.ExceptionOrBuilder> exceptionBuilder_;
      /**
       * <pre>
       * Set by the ClickHouse server if there was an exception thrown while executing.
       * </pre>
       *
       * <code>.clickhouse.grpc.Exception exception = 7;</code>
       */
      public boolean hasException() {
        return exceptionBuilder_ != null || exception_ != null;
      }
      /**
       * <pre>
       * Set by the ClickHouse server if there was an exception thrown while executing.
       * </pre>
       *
       * <code>.clickhouse.grpc.Exception exception = 7;</code>
       */
      public ClickhouseGrpc.Exception getException() {
        if (exceptionBuilder_ == null) {
          return exception_ == null ? ClickhouseGrpc.Exception.getDefaultInstance() : exception_;
        } else {
          return exceptionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Set by the ClickHouse server if there was an exception thrown while executing.
       * </pre>
       *
       * <code>.clickhouse.grpc.Exception exception = 7;</code>
       */
      public Builder setException(ClickhouseGrpc.Exception value) {
        if (exceptionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          exception_ = value;
          onChanged();
        } else {
          exceptionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Set by the ClickHouse server if there was an exception thrown while executing.
       * </pre>
       *
       * <code>.clickhouse.grpc.Exception exception = 7;</code>
       */
      public Builder setException(
          ClickhouseGrpc.Exception.Builder builderForValue) {
        if (exceptionBuilder_ == null) {
          exception_ = builderForValue.build();
          onChanged();
        } else {
          exceptionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Set by the ClickHouse server if there was an exception thrown while executing.
       * </pre>
       *
       * <code>.clickhouse.grpc.Exception exception = 7;</code>
       */
      public Builder mergeException(ClickhouseGrpc.Exception value) {
        if (exceptionBuilder_ == null) {
          if (exception_ != null) {
            exception_ =
              ClickhouseGrpc.Exception.newBuilder(exception_).mergeFrom(value).buildPartial();
          } else {
            exception_ = value;
          }
          onChanged();
        } else {
          exceptionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Set by the ClickHouse server if there was an exception thrown while executing.
       * </pre>
       *
       * <code>.clickhouse.grpc.Exception exception = 7;</code>
       */
      public Builder clearException() {
        if (exceptionBuilder_ == null) {
          exception_ = null;
          onChanged();
        } else {
          exception_ = null;
          exceptionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Set by the ClickHouse server if there was an exception thrown while executing.
       * </pre>
       *
       * <code>.clickhouse.grpc.Exception exception = 7;</code>
       */
      public ClickhouseGrpc.Exception.Builder getExceptionBuilder() {

        onChanged();
        return getExceptionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Set by the ClickHouse server if there was an exception thrown while executing.
       * </pre>
       *
       * <code>.clickhouse.grpc.Exception exception = 7;</code>
       */
      public ClickhouseGrpc.ExceptionOrBuilder getExceptionOrBuilder() {
        if (exceptionBuilder_ != null) {
          return exceptionBuilder_.getMessageOrBuilder();
        } else {
          return exception_ == null ?
              ClickhouseGrpc.Exception.getDefaultInstance() : exception_;
        }
      }
      /**
       * <pre>
       * Set by the ClickHouse server if there was an exception thrown while executing.
       * </pre>
       *
       * <code>.clickhouse.grpc.Exception exception = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          ClickhouseGrpc.Exception, ClickhouseGrpc.Exception.Builder, ClickhouseGrpc.ExceptionOrBuilder>
          getExceptionFieldBuilder() {
        if (exceptionBuilder_ == null) {
          exceptionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              ClickhouseGrpc.Exception, ClickhouseGrpc.Exception.Builder, ClickhouseGrpc.ExceptionOrBuilder>(
                  getException(),
                  getParentForChildren(),
                  isClean());
          exception_ = null;
        }
        return exceptionBuilder_;
      }

      private boolean cancelled_ ;
      /**
       * <pre>
       * Set by the ClickHouse server if executing was cancelled by the `cancel` field in QueryInfo.
       * </pre>
       *
       * <code>bool cancelled = 8;</code>
       */
      public boolean getCancelled() {
        return cancelled_;
      }
      /**
       * <pre>
       * Set by the ClickHouse server if executing was cancelled by the `cancel` field in QueryInfo.
       * </pre>
       *
       * <code>bool cancelled = 8;</code>
       */
      public Builder setCancelled(boolean value) {

        cancelled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set by the ClickHouse server if executing was cancelled by the `cancel` field in QueryInfo.
       * </pre>
       *
       * <code>bool cancelled = 8;</code>
       */
      public Builder clearCancelled() {

        cancelled_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clickhouse.grpc.Result)
    }

    // @@protoc_insertion_point(class_scope:clickhouse.grpc.Result)
    private static final ClickhouseGrpc.Result DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ClickhouseGrpc.Result();
    }

    public static ClickhouseGrpc.Result getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Result>
        PARSER = new com.google.protobuf.AbstractParser<Result>() {
      public Result parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Result(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Result> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Result> getParserForType() {
      return PARSER;
    }

    public ClickhouseGrpc.Result getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clickhouse_grpc_NameAndType_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clickhouse_grpc_NameAndType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clickhouse_grpc_ExternalTable_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clickhouse_grpc_ExternalTable_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clickhouse_grpc_ExternalTable_SettingsEntry_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clickhouse_grpc_ExternalTable_SettingsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clickhouse_grpc_ObsoleteTransportCompression_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clickhouse_grpc_ObsoleteTransportCompression_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clickhouse_grpc_QueryInfo_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clickhouse_grpc_QueryInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clickhouse_grpc_QueryInfo_SettingsEntry_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clickhouse_grpc_QueryInfo_SettingsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clickhouse_grpc_LogEntry_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clickhouse_grpc_LogEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clickhouse_grpc_Progress_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clickhouse_grpc_Progress_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clickhouse_grpc_Stats_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clickhouse_grpc_Stats_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clickhouse_grpc_Exception_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clickhouse_grpc_Exception_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clickhouse_grpc_Result_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clickhouse_grpc_Result_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025clickhouse_grpc.proto\022\017clickhouse.grpc" +
      "\")\n\013NameAndType\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 " +
      "\001(\t\"\365\001\n\rExternalTable\022\014\n\004name\030\001 \001(\t\022-\n\007c" +
      "olumns\030\002 \003(\0132\034.clickhouse.grpc.NameAndTy" +
      "pe\022\014\n\004data\030\003 \001(\014\022\016\n\006format\030\004 \001(\t\022\030\n\020comp" +
      "ression_type\030\006 \001(\t\022>\n\010settings\030\005 \003(\0132,.c" +
      "lickhouse.grpc.ExternalTable.SettingsEnt" +
      "ry\032/\n\rSettingsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu" +
      "e\030\002 \001(\t:\0028\001\"\205\003\n\034ObsoleteTransportCompres" +
      "sion\022U\n\talgorithm\030\001 \001(\0162B.clickhouse.grp" +
      "c.ObsoleteTransportCompression.Compressi" +
      "onAlgorithm\022M\n\005level\030\002 \001(\0162>.clickhouse." +
      "grpc.ObsoleteTransportCompression.Compre" +
      "ssionLevel\"R\n\024CompressionAlgorithm\022\022\n\016NO" +
      "_COMPRESSION\020\000\022\013\n\007DEFLATE\020\001\022\010\n\004GZIP\020\002\022\017\n" +
      "\013STREAM_GZIP\020\003\"k\n\020CompressionLevel\022\024\n\020CO" +
      "MPRESSION_NONE\020\000\022\023\n\017COMPRESSION_LOW\020\001\022\026\n" +
      "\022COMPRESSION_MEDIUM\020\002\022\024\n\020COMPRESSION_HIG" +
      "H\020\003\"\216\006\n\tQueryInfo\022\r\n\005query\030\001 \001(\t\022\020\n\010quer" +
      "y_id\030\002 \001(\t\022:\n\010settings\030\003 \003(\0132(.clickhous" +
      "e.grpc.QueryInfo.SettingsEntry\022\020\n\010databa" +
      "se\030\004 \001(\t\022\022\n\ninput_data\030\005 \001(\014\022\034\n\024input_da" +
      "ta_delimiter\030\006 \001(\014\022\025\n\routput_format\030\007 \001(" +
      "\t\022\033\n\023send_output_columns\030\030 \001(\010\0227\n\017extern" +
      "al_tables\030\010 \003(\0132\036.clickhouse.grpc.Extern" +
      "alTable\022\021\n\tuser_name\030\t \001(\t\022\020\n\010password\030\n" +
      " \001(\t\022\r\n\005quota\030\013 \001(\t\022\022\n\nsession_id\030\014 \001(\t\022" +
      "\025\n\rsession_check\030\r \001(\010\022\027\n\017session_timeou" +
      "t\030\016 \001(\r\022\016\n\006cancel\030\017 \001(\010\022\027\n\017next_query_in" +
      "fo\030\020 \001(\010\022\036\n\026input_compression_type\030\024 \001(\t" +
      "\022\037\n\027output_compression_type\030\025 \001(\t\022 \n\030out" +
      "put_compression_level\030\023 \001(\005\022\"\n\032transport" +
      "_compression_type\030\026 \001(\t\022#\n\033transport_com" +
      "pression_level\030\027 \001(\005\022R\n\033obsolete_result_" +
      "compression\030\021 \001(\0132-.clickhouse.grpc.Obso" +
      "leteTransportCompression\022!\n\031obsolete_com" +
      "pression_type\030\022 \001(\t\032/\n\rSettingsEntry\022\013\n\003" +
      "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\241\001\n\010LogEntr" +
      "y\022\014\n\004time\030\001 \001(\r\022\031\n\021time_microseconds\030\002 \001" +
      "(\r\022\021\n\tthread_id\030\003 \001(\004\022\020\n\010query_id\030\004 \001(\t\022" +
      ")\n\005level\030\005 \001(\0162\032.clickhouse.grpc.LogsLev" +
      "el\022\016\n\006source\030\006 \001(\t\022\014\n\004text\030\007 \001(\t\"z\n\010Prog" +
      "ress\022\021\n\tread_rows\030\001 \001(\004\022\022\n\nread_bytes\030\002 " +
      "\001(\004\022\032\n\022total_rows_to_read\030\003 \001(\004\022\024\n\014writt" +
      "en_rows\030\004 \001(\004\022\025\n\rwritten_bytes\030\005 \001(\004\"p\n\005" +
      "Stats\022\014\n\004rows\030\001 \001(\004\022\016\n\006blocks\030\002 \001(\004\022\027\n\017a" +
      "llocated_bytes\030\003 \001(\004\022\025\n\rapplied_limit\030\004 " +
      "\001(\010\022\031\n\021rows_before_limit\030\005 \001(\004\"R\n\tExcept" +
      "ion\022\014\n\004code\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\024\n\014displ" +
      "ay_text\030\003 \001(\t\022\023\n\013stack_trace\030\004 \001(\t\"\353\002\n\006R" +
      "esult\022\020\n\010query_id\030\t \001(\t\022\021\n\ttime_zone\030\n \001" +
      "(\t\022\025\n\routput_format\030\013 \001(\t\0224\n\016output_colu" +
      "mns\030\014 \003(\0132\034.clickhouse.grpc.NameAndType\022" +
      "\016\n\006output\030\001 \001(\014\022\016\n\006totals\030\002 \001(\014\022\020\n\010extre" +
      "mes\030\003 \001(\014\022\'\n\004logs\030\004 \003(\0132\031.clickhouse.grp" +
      "c.LogEntry\022+\n\010progress\030\005 \001(\0132\031.clickhous" +
      "e.grpc.Progress\022%\n\005stats\030\006 \001(\0132\026.clickho" +
      "use.grpc.Stats\022-\n\texception\030\007 \001(\0132\032.clic" +
      "khouse.grpc.Exception\022\021\n\tcancelled\030\010 \001(\010" +
      "*\235\001\n\tLogsLevel\022\014\n\010LOG_NONE\020\000\022\r\n\tLOG_FATA" +
      "L\020\001\022\020\n\014LOG_CRITICAL\020\002\022\r\n\tLOG_ERROR\020\003\022\017\n\013" +
      "LOG_WARNING\020\004\022\016\n\nLOG_NOTICE\020\005\022\023\n\017LOG_INF" +
      "ORMATION\020\006\022\r\n\tLOG_DEBUG\020\007\022\r\n\tLOG_TRACE\020\010" +
      "2\333\002\n\nClickHouse\022E\n\014ExecuteQuery\022\032.clickh" +
      "ouse.grpc.QueryInfo\032\027.clickhouse.grpc.Re" +
      "sult\"\000\022V\n\033ExecuteQueryWithStreamInput\022\032." +
      "clickhouse.grpc.QueryInfo\032\027.clickhouse.g" +
      "rpc.Result\"\000(\001\022W\n\034ExecuteQueryWithStream" +
      "Output\022\032.clickhouse.grpc.QueryInfo\032\027.cli" +
      "ckhouse.grpc.Result\"\0000\001\022U\n\030ExecuteQueryW" +
      "ithStreamIO\022\032.clickhouse.grpc.QueryInfo\032" +
      "\027.clickhouse.grpc.Result\"\000(\0010\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_clickhouse_grpc_NameAndType_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_clickhouse_grpc_NameAndType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clickhouse_grpc_NameAndType_descriptor,
        new java.lang.String[] { "Name", "Type", });
    internal_static_clickhouse_grpc_ExternalTable_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_clickhouse_grpc_ExternalTable_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clickhouse_grpc_ExternalTable_descriptor,
        new java.lang.String[] { "Name", "Columns", "Data", "Format", "CompressionType", "Settings", });
    internal_static_clickhouse_grpc_ExternalTable_SettingsEntry_descriptor =
      internal_static_clickhouse_grpc_ExternalTable_descriptor.getNestedTypes().get(0);
    internal_static_clickhouse_grpc_ExternalTable_SettingsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clickhouse_grpc_ExternalTable_SettingsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_clickhouse_grpc_ObsoleteTransportCompression_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_clickhouse_grpc_ObsoleteTransportCompression_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clickhouse_grpc_ObsoleteTransportCompression_descriptor,
        new java.lang.String[] { "Algorithm", "Level", });
    internal_static_clickhouse_grpc_QueryInfo_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_clickhouse_grpc_QueryInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clickhouse_grpc_QueryInfo_descriptor,
        new java.lang.String[] { "Query", "QueryId", "Settings", "Database", "InputData", "InputDataDelimiter", "OutputFormat", "SendOutputColumns", "ExternalTables", "UserName", "Password", "Quota", "SessionId", "SessionCheck", "SessionTimeout", "Cancel", "NextQueryInfo", "InputCompressionType", "OutputCompressionType", "OutputCompressionLevel", "TransportCompressionType", "TransportCompressionLevel", "ObsoleteResultCompression", "ObsoleteCompressionType", });
    internal_static_clickhouse_grpc_QueryInfo_SettingsEntry_descriptor =
      internal_static_clickhouse_grpc_QueryInfo_descriptor.getNestedTypes().get(0);
    internal_static_clickhouse_grpc_QueryInfo_SettingsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clickhouse_grpc_QueryInfo_SettingsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_clickhouse_grpc_LogEntry_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_clickhouse_grpc_LogEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clickhouse_grpc_LogEntry_descriptor,
        new java.lang.String[] { "Time", "TimeMicroseconds", "ThreadId", "QueryId", "Level", "Source", "Text", });
    internal_static_clickhouse_grpc_Progress_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_clickhouse_grpc_Progress_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clickhouse_grpc_Progress_descriptor,
        new java.lang.String[] { "ReadRows", "ReadBytes", "TotalRowsToRead", "WrittenRows", "WrittenBytes", });
    internal_static_clickhouse_grpc_Stats_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_clickhouse_grpc_Stats_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clickhouse_grpc_Stats_descriptor,
        new java.lang.String[] { "Rows", "Blocks", "AllocatedBytes", "AppliedLimit", "RowsBeforeLimit", });
    internal_static_clickhouse_grpc_Exception_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_clickhouse_grpc_Exception_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clickhouse_grpc_Exception_descriptor,
        new java.lang.String[] { "Code", "Name", "DisplayText", "StackTrace", });
    internal_static_clickhouse_grpc_Result_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_clickhouse_grpc_Result_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clickhouse_grpc_Result_descriptor,
        new java.lang.String[] { "QueryId", "TimeZone", "OutputFormat", "OutputColumns", "Output", "Totals", "Extremes", "Logs", "Progress", "Stats", "Exception", "Cancelled", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
